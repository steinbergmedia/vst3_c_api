/*-----------------------------------------------------------------------------
 This file is part of a Steinberg SDK. It is subject to the license terms
 in the LICENSE file found in the top-level directory of this distribution
 and at www.steinberg.net/sdklicenses. 
 No part of the SDK, including this file, may be copied, modified, propagated,
 or distributed except according to the terms contained in the LICENSE file.
-----------------------------------------------------------------------------*/

/* This file is the autogenerated C API of the VST3 SDK */

#pragma once

#include <stdint.h>

#if _WIN32
#define SMTG_STDMETHODCALLTYPE __stdcall
#define SMTG_COM_COMPATIBLE 1
#else
#define SMTG_STDMETHODCALLTYPE
#define SMTG_COM_COMPATIBLE 0
#endif

#ifndef __cplusplus
typedef int16_t char16_t;
#endif

#if SMTG_COM_COMPATIBLE
#define SMTG_INLINE_UID(l1, l2, l3, l4) \
{ \
	(Steinberg_int8)(((Steinberg_uint32)(l1) & 0x000000FF)      ), (Steinberg_int8)(((Steinberg_uint32)(l1) & 0x0000FF00) >>  8), \
	(Steinberg_int8)(((Steinberg_uint32)(l1) & 0x00FF0000) >> 16), (Steinberg_int8)(((Steinberg_uint32)(l1) & 0xFF000000) >> 24), \
	(Steinberg_int8)(((Steinberg_uint32)(l2) & 0x00FF0000) >> 16), (Steinberg_int8)(((Steinberg_uint32)(l2) & 0xFF000000) >> 24), \
	(Steinberg_int8)(((Steinberg_uint32)(l2) & 0x000000FF)      ), (Steinberg_int8)(((Steinberg_uint32)(l2) & 0x0000FF00) >>  8), \
	(Steinberg_int8)(((Steinberg_uint32)(l3) & 0xFF000000) >> 24), (Steinberg_int8)(((Steinberg_uint32)(l3) & 0x00FF0000) >> 16), \
	(Steinberg_int8)(((Steinberg_uint32)(l3) & 0x0000FF00) >>  8), (Steinberg_int8)(((Steinberg_uint32)(l3) & 0x000000FF)      ), \
	(Steinberg_int8)(((Steinberg_uint32)(l4) & 0xFF000000) >> 24), (Steinberg_int8)(((Steinberg_uint32)(l4) & 0x00FF0000) >> 16), \
	(Steinberg_int8)(((Steinberg_uint32)(l4) & 0x0000FF00) >>  8), (Steinberg_int8)(((Steinberg_uint32)(l4) & 0x000000FF)      )  \
}
#else
#define SMTG_INLINE_UID(l1, l2, l3, l4) \
{ \
	(Steinberg_int8)(((Steinberg_uint32)(l1) & 0xFF000000) >> 24), (Steinberg_int8)(((Steinberg_uint32)(l1) & 0x00FF0000) >> 16), \
	(Steinberg_int8)(((Steinberg_uint32)(l1) & 0x0000FF00) >>  8), (Steinberg_int8)(((Steinberg_uint32)(l1) & 0x000000FF)      ), \
	(Steinberg_int8)(((Steinberg_uint32)(l2) & 0xFF000000) >> 24), (Steinberg_int8)(((Steinberg_uint32)(l2) & 0x00FF0000) >> 16), \
	(Steinberg_int8)(((Steinberg_uint32)(l2) & 0x0000FF00) >>  8), (Steinberg_int8)(((Steinberg_uint32)(l2) & 0x000000FF)      ), \
	(Steinberg_int8)(((Steinberg_uint32)(l3) & 0xFF000000) >> 24), (Steinberg_int8)(((Steinberg_uint32)(l3) & 0x00FF0000) >> 16), \
	(Steinberg_int8)(((Steinberg_uint32)(l3) & 0x0000FF00) >>  8), (Steinberg_int8)(((Steinberg_uint32)(l3) & 0x000000FF)      ), \
	(Steinberg_int8)(((Steinberg_uint32)(l4) & 0xFF000000) >> 24), (Steinberg_int8)(((Steinberg_uint32)(l4) & 0x00FF0000) >> 16), \
	(Steinberg_int8)(((Steinberg_uint32)(l4) & 0x0000FF00) >>  8), (Steinberg_int8)(((Steinberg_uint32)(l4) & 0x000000FF)      )  \
}
#endif

/*----------------------------------------------------------------------------------------------------------------------
----- Typedefs ---------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------*/

typedef char Steinberg_int8;
typedef uint8_t Steinberg_uint8;
typedef unsigned char Steinberg_uchar;
typedef int16_t Steinberg_int16;
typedef uint16_t Steinberg_uint16;
typedef int32_t Steinberg_int32;
typedef uint32_t Steinberg_uint32;
typedef int64_t Steinberg_int64;
typedef uint64_t Steinberg_uint64;
typedef Steinberg_int64 Steinberg_TSize;
typedef Steinberg_int32 Steinberg_tresult;
typedef Steinberg_uint64 Steinberg_TPtrInt;
typedef Steinberg_uint8 Steinberg_TBool;
typedef char Steinberg_char8;
typedef char16_t Steinberg_char16;
typedef Steinberg_char16 Steinberg_tchar;
typedef const Steinberg_char8* Steinberg_CStringA;
typedef const Steinberg_char16* Steinberg_CStringW;
typedef const Steinberg_tchar* Steinberg_CString;
typedef const Steinberg_char8* Steinberg_FIDString;
typedef Steinberg_int32 Steinberg_UCoord;
typedef Steinberg_int64 Steinberg_LARGE_INT;
typedef char Steinberg_TUID[16];
typedef Steinberg_char16 Steinberg_Vst_TChar;
typedef Steinberg_Vst_TChar Steinberg_Vst_String128[128];
typedef const Steinberg_char8* Steinberg_Vst_CString;
typedef Steinberg_int32 Steinberg_Vst_MediaType;
typedef Steinberg_int32 Steinberg_Vst_BusDirection;
typedef Steinberg_int32 Steinberg_Vst_BusType;
typedef Steinberg_int32 Steinberg_Vst_IoMode;
typedef Steinberg_int32 Steinberg_Vst_UnitID;
typedef double Steinberg_Vst_ParamValue;
typedef Steinberg_uint32 Steinberg_Vst_ParamID;
typedef Steinberg_int32 Steinberg_Vst_ProgramListID;
typedef Steinberg_int16 Steinberg_Vst_CtrlNumber;
typedef double Steinberg_Vst_TQuarterNotes;
typedef Steinberg_int64 Steinberg_Vst_TSamples;
typedef Steinberg_uint32 Steinberg_Vst_ColorSpec;
typedef float Steinberg_Vst_Sample32;
typedef double Steinberg_Vst_Sample64;
typedef double Steinberg_Vst_SampleRate;
typedef Steinberg_uint64 Steinberg_Vst_SpeakerArrangement;
typedef Steinberg_uint64 Steinberg_Vst_Speaker;
typedef Steinberg_uint32 Steinberg_Vst_NoteExpressionTypeID;
typedef double Steinberg_Vst_NoteExpressionValue;
typedef Steinberg_uint32 Steinberg_Vst_KeyswitchTypeID;
typedef Steinberg_uint32 Steinberg_Vst_PhysicalUITypeID;
typedef Steinberg_int32 Steinberg_Vst_KnobMode;
typedef Steinberg_uint32 Steinberg_Vst_ChannelContext_ColorSpec;
typedef Steinberg_uint8 Steinberg_Vst_ChannelContext_ColorComponent;
typedef Steinberg_uint32 Steinberg_Vst_PrefetchableSupport;


/*----------------------------------------------------------------------------------------------------------------------
----- Interface forward declarations -----------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------*/

struct Steinberg_FUnknown;
struct Steinberg_IPlugViewContentScaleSupport;
struct Steinberg_IPlugView;
struct Steinberg_IPlugFrame;
struct Steinberg_IBStream;
struct Steinberg_ISizeableStream;
struct Steinberg_Vst_INoteExpressionController;
struct Steinberg_Vst_IKeyswitchController;
struct Steinberg_Vst_INoteExpressionPhysicalUIMapping;
struct Steinberg_IPluginBase;
struct Steinberg_IPluginFactory;
struct Steinberg_IPluginFactory2;
struct Steinberg_IPluginFactory3;
struct Steinberg_Vst_IComponent;
struct Steinberg_Vst_IAttributeList;
struct Steinberg_Vst_IStreamAttributes;
struct Steinberg_Vst_IComponentHandler;
struct Steinberg_Vst_IComponentHandler2;
struct Steinberg_Vst_IComponentHandlerBusActivation;
struct Steinberg_Vst_IProgress;
struct Steinberg_Vst_IEditController;
struct Steinberg_Vst_IEditController2;
struct Steinberg_Vst_IMidiMapping;
struct Steinberg_Vst_IEditControllerHostEditing;
struct Steinberg_Vst_IEventList;
struct Steinberg_Vst_IMessage;
struct Steinberg_Vst_IConnectionPoint;
struct Steinberg_Vst_IXmlRepresentationController;
struct Steinberg_Vst_IComponentHandler3;
struct Steinberg_Vst_IContextMenuTarget;
struct Steinberg_Vst_IContextMenu;
struct Steinberg_Vst_IMidiLearn;
struct Steinberg_Vst_ChannelContext_IInfoListener;
struct Steinberg_Vst_IPrefetchableSupport;
struct Steinberg_Vst_IAutomationState;
struct Steinberg_Vst_IInterAppAudioHost;
struct Steinberg_Vst_IInterAppAudioConnectionNotification;
struct Steinberg_Vst_IInterAppAudioPresetManager;
struct Steinberg_Vst_IAudioProcessor;
struct Steinberg_Vst_IAudioPresentationLatency;
struct Steinberg_Vst_IProcessContextRequirements;
struct Steinberg_Vst_IHostApplication;
struct Steinberg_Vst_IVst3ToVst2Wrapper;
struct Steinberg_Vst_IVst3ToAUWrapper;
struct Steinberg_Vst_IVst3ToAAXWrapper;
struct Steinberg_Vst_IVst3WrapperMPESupport;
struct Steinberg_Vst_IParameterFinder;
struct Steinberg_Vst_IUnitHandler;
struct Steinberg_Vst_IUnitHandler2;
struct Steinberg_Vst_IUnitInfo;
struct Steinberg_Vst_IProgramListData;
struct Steinberg_Vst_IUnitData;
struct Steinberg_Vst_IPlugInterfaceSupport;
struct Steinberg_Vst_IParameterFunctionName;
struct Steinberg_Vst_IParamValueQueue;
struct Steinberg_Vst_IParameterChanges;


/*----------------------------------------------------------------------------------------------------------------------
----- Struct forward declarations --------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------*/

struct Steinberg_ViewRect;
struct Steinberg_Vst_NoteExpressionValueDescription;
struct Steinberg_Vst_NoteExpressionValueEvent;
struct Steinberg_Vst_NoteExpressionTextEvent;
struct Steinberg_Vst_NoteExpressionTypeInfo;
struct Steinberg_Vst_KeyswitchInfo;
struct Steinberg_Vst_PhysicalUIMap;
struct Steinberg_Vst_PhysicalUIMapList;
struct Steinberg_PFactoryInfo;
struct Steinberg_PClassInfo;
struct Steinberg_PClassInfo2;
struct Steinberg_PClassInfoW;
struct Steinberg_Vst_BusInfo;
struct Steinberg_Vst_RoutingInfo;
struct Steinberg_Vst_ParameterInfo;
struct Steinberg_Vst_FrameRate;
struct Steinberg_Vst_Chord;
struct Steinberg_Vst_ProcessContext;
struct Steinberg_Vst_NoteOnEvent;
struct Steinberg_Vst_NoteOffEvent;
struct Steinberg_Vst_DataEvent;
struct Steinberg_Vst_PolyPressureEvent;
struct Steinberg_Vst_ChordEvent;
struct Steinberg_Vst_ScaleEvent;
struct Steinberg_Vst_LegacyMIDICCOutEvent;
struct Steinberg_Vst_Event;
struct Steinberg_Vst_RepresentationInfo;
struct Steinberg_Vst_IContextMenuItem;
struct Steinberg_Vst_ProcessSetup;
struct Steinberg_Vst_AudioBusBuffers;
struct Steinberg_Vst_ProcessData;
struct Steinberg_Vst_UnitInfo;
struct Steinberg_Vst_ProgramListInfo;


/*----------------------------------------------------------------------------------------------------------------------
----- Result value definitions -----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------*/

#if SMTG_COM_COMPATIBLE
static const Steinberg_tresult Steinberg_kNoInterface = 0x80004002L;
static const Steinberg_tresult Steinberg_kResultOk = 0x00000000L;
static const Steinberg_tresult Steinberg_kResultTrue = 0x00000000L;
static const Steinberg_tresult Steinberg_kResultFalse = 0x00000001L;
static const Steinberg_tresult Steinberg_kInvalidArgument = 0x80070057L;
static const Steinberg_tresult Steinberg_kNotImplemented = 0x80004001L;
static const Steinberg_tresult Steinberg_kInternalError = 0x80004005L;
static const Steinberg_tresult Steinberg_kNotInitialized = 0x8000FFFFL;
static const Steinberg_tresult Steinberg_kOutOfMemory = 0x8007000EL;

#else
static const Steinberg_tresult Steinberg_kNoInterface = -1;
static const Steinberg_tresult Steinberg_kResultOk = 0;
static const Steinberg_tresult Steinberg_kResultTrue = 0;
static const Steinberg_tresult Steinberg_kResultFalse = 1;
static const Steinberg_tresult Steinberg_kInvalidArgument = 2;
static const Steinberg_tresult Steinberg_kNotImplemented = 3;
static const Steinberg_tresult Steinberg_kInternalError = 4;
static const Steinberg_tresult Steinberg_kNotInitialized = 5;
static const Steinberg_tresult Steinberg_kOutOfMemory = 6;
#endif


/*----------------------------------------------------------------------------------------------------------------------
----- Interface typedefs -----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------*/

typedef float Steinberg_IPlugViewContentScaleSupport_ScaleFactor;
typedef const char* Steinberg_Vst_IAttributeList_AttrID;
typedef Steinberg_uint64 Steinberg_Vst_IProgress_ID;
typedef struct Steinberg_Vst_IContextMenuItem Steinberg_Vst_IContextMenu_Item;


/*----------------------------------------------------------------------------------------------------------------------
----- Enums ------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/base/ibstream.h", line 32 */

typedef enum
{
    Steinberg_IBStream_IStreamSeekMode_kIBSeekSet = 0,
    Steinberg_IBStream_IStreamSeekMode_kIBSeekCur,
    Steinberg_IBStream_IStreamSeekMode_kIBSeekEnd
} Steinberg_IBStream_IStreamSeekMode;

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstnoteexpression.h", line 46 */

typedef enum
{
    Steinberg_Vst_NoteExpressionTypeIDs_kVolumeTypeID = 0,
    Steinberg_Vst_NoteExpressionTypeIDs_kPanTypeID,
    Steinberg_Vst_NoteExpressionTypeIDs_kTuningTypeID,
    Steinberg_Vst_NoteExpressionTypeIDs_kVibratoTypeID,
    Steinberg_Vst_NoteExpressionTypeIDs_kExpressionTypeID,
    Steinberg_Vst_NoteExpressionTypeIDs_kBrightnessTypeID,
    Steinberg_Vst_NoteExpressionTypeIDs_kTextTypeID,
    Steinberg_Vst_NoteExpressionTypeIDs_kPhonemeTypeID,
    Steinberg_Vst_NoteExpressionTypeIDs_kCustomStart = 100000,
    Steinberg_Vst_NoteExpressionTypeIDs_kCustomEnd = 200000,
    Steinberg_Vst_NoteExpressionTypeIDs_kInvalidTypeID = 0xFFFFFFFF
} Steinberg_Vst_NoteExpressionTypeIDs;

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstnoteexpression.h", line 137 */

typedef enum
{
    Steinberg_Vst_NoteExpressionTypeInfo_NoteExpressionTypeFlags_kIsBipolar = 1 << 0,
    Steinberg_Vst_NoteExpressionTypeInfo_NoteExpressionTypeFlags_kIsOneShot = 1 << 1,
    Steinberg_Vst_NoteExpressionTypeInfo_NoteExpressionTypeFlags_kIsAbsolute = 1 << 2,
    Steinberg_Vst_NoteExpressionTypeInfo_NoteExpressionTypeFlags_kAssociatedParameterIDValid = 1 << 3
} Steinberg_Vst_NoteExpressionTypeInfo_NoteExpressionTypeFlags;

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstnoteexpression.h", line 191 */

typedef enum
{
    Steinberg_Vst_KeyswitchTypeIDs_kNoteOnKeyswitchTypeID = 0,
    Steinberg_Vst_KeyswitchTypeIDs_kOnTheFlyKeyswitchTypeID,
    Steinberg_Vst_KeyswitchTypeIDs_kOnReleaseKeyswitchTypeID,
    Steinberg_Vst_KeyswitchTypeIDs_kKeyRangeTypeID
} Steinberg_Vst_KeyswitchTypeIDs;

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstphysicalui.h", line 42 */

typedef enum
{
    Steinberg_Vst_PhysicalUITypeIDs_kPUIXMovement = 0,
    Steinberg_Vst_PhysicalUITypeIDs_kPUIYMovement,
    Steinberg_Vst_PhysicalUITypeIDs_kPUIPressure,
    Steinberg_Vst_PhysicalUITypeIDs_kPUITypeCount,
    Steinberg_Vst_PhysicalUITypeIDs_kInvalidPUITypeID = 0xFFFFFFFF
} Steinberg_Vst_PhysicalUITypeIDs;

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/base/ipluginbase.h", line 65 */

typedef enum
{
    Steinberg_PFactoryInfo_FactoryFlags_kNoFlags = 0,
    Steinberg_PFactoryInfo_FactoryFlags_kClassesDiscardable = 1 << 0,
    Steinberg_PFactoryInfo_FactoryFlags_kLicenseCheck = 1 << 1,
    Steinberg_PFactoryInfo_FactoryFlags_kComponentNonDiscardable = 1 << 3,
    Steinberg_PFactoryInfo_FactoryFlags_kUnicode = 1 << 4
} Steinberg_PFactoryInfo_FactoryFlags;

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/base/ipluginbase.h", line 127 */

typedef enum
{
    Steinberg_PClassInfo_ClassCardinality_kManyInstances = 0x7FFFFFFF
} Steinberg_PClassInfo_ClassCardinality;

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstcomponent.h", line 64 */

typedef enum
{
    Steinberg_Vst_MediaTypes_kAudio = 0,
    Steinberg_Vst_MediaTypes_kEvent,
    Steinberg_Vst_MediaTypes_kNumMediaTypes
} Steinberg_Vst_MediaTypes;

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstcomponent.h", line 73 */

typedef enum
{
    Steinberg_Vst_BusDirections_kInput = 0,
    Steinberg_Vst_BusDirections_kOutput
} Steinberg_Vst_BusDirections;

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstcomponent.h", line 81 */

typedef enum
{
    Steinberg_Vst_BusTypes_kMain = 0,
    Steinberg_Vst_BusTypes_kAux
} Steinberg_Vst_BusTypes;

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstcomponent.h", line 103 */

typedef enum
{
    Steinberg_Vst_BusInfo_BusFlags_kDefaultActive = 1 << 0,
    Steinberg_Vst_BusInfo_BusFlags_kIsControlVoltage = 1 << 1
} Steinberg_Vst_BusInfo_BusFlags;

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstcomponent.h", line 121 */

typedef enum
{
    Steinberg_Vst_IoModes_kSimple = 0,
    Steinberg_Vst_IoModes_kAdvanced,
    Steinberg_Vst_IoModes_kOfflineProcessing
} Steinberg_Vst_IoModes;

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivsteditcontroller.h", line 59 */

typedef enum
{
    Steinberg_Vst_ParameterInfo_ParameterFlags_kNoFlags = 0,
    Steinberg_Vst_ParameterInfo_ParameterFlags_kCanAutomate = 1 << 0,
    Steinberg_Vst_ParameterInfo_ParameterFlags_kIsReadOnly = 1 << 1,
    Steinberg_Vst_ParameterInfo_ParameterFlags_kIsWrapAround = 1 << 2,
    Steinberg_Vst_ParameterInfo_ParameterFlags_kIsList = 1 << 3,
    Steinberg_Vst_ParameterInfo_ParameterFlags_kIsHidden = 1 << 4,
    Steinberg_Vst_ParameterInfo_ParameterFlags_kIsProgramChange = 1 << 15,
    Steinberg_Vst_ParameterInfo_ParameterFlags_kIsBypass = 1 << 16
} Steinberg_Vst_ParameterInfo_ParameterFlags;

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivsteditcontroller.h", line 86 */

typedef enum
{
    Steinberg_Vst_RestartFlags_kReloadComponent = 1 << 0,
    Steinberg_Vst_RestartFlags_kIoChanged = 1 << 1,
    Steinberg_Vst_RestartFlags_kParamValuesChanged = 1 << 2,
    Steinberg_Vst_RestartFlags_kLatencyChanged = 1 << 3,
    Steinberg_Vst_RestartFlags_kParamTitlesChanged = 1 << 4,
    Steinberg_Vst_RestartFlags_kMidiCCAssignmentChanged = 1 << 5,
    Steinberg_Vst_RestartFlags_kNoteExpressionChanged = 1 << 6,
    Steinberg_Vst_RestartFlags_kIoTitlesChanged = 1 << 7,
    Steinberg_Vst_RestartFlags_kPrefetchableSupportChanged = 1 << 8,
    Steinberg_Vst_RestartFlags_kRoutingInfoChanged = 1 << 9,
    Steinberg_Vst_RestartFlags_kKeyswitchChanged = 1 << 10
} Steinberg_Vst_RestartFlags;

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivsteditcontroller.h", line 365 */

typedef enum
{
    Steinberg_Vst_IProgress_ProgressType_AsyncStateRestoration = 0,
    Steinberg_Vst_IProgress_ProgressType_UIBackgroundTask
} Steinberg_Vst_IProgress_ProgressType;

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivsteditcontroller.h", line 453 */

typedef enum
{
    Steinberg_Vst_KnobModes_kCircularMode = 0,
    Steinberg_Vst_KnobModes_kRelativCircularMode,
    Steinberg_Vst_KnobModes_kLinearMode
} Steinberg_Vst_KnobModes;

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstprocesscontext.h", line 47 */

typedef enum
{
    Steinberg_Vst_FrameRate_FrameRateFlags_kPullDownRate = 1 << 0,
    Steinberg_Vst_FrameRate_FrameRateFlags_kDropRate = 1 << 1
} Steinberg_Vst_FrameRate_FrameRateFlags;

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstprocesscontext.h", line 79 */

typedef enum
{
    Steinberg_Vst_Chord_Masks_kChordMask = 0x0FFF,
    Steinberg_Vst_Chord_Masks_kReservedMask = 0xF000
} Steinberg_Vst_Chord_Masks;

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstprocesscontext.h", line 100 */

typedef enum
{
    Steinberg_Vst_ProcessContext_StatesAndFlags_kPlaying = 1 << 1,
    Steinberg_Vst_ProcessContext_StatesAndFlags_kCycleActive = 1 << 2,
    Steinberg_Vst_ProcessContext_StatesAndFlags_kRecording = 1 << 3,
    Steinberg_Vst_ProcessContext_StatesAndFlags_kSystemTimeValid = 1 << 8,
    Steinberg_Vst_ProcessContext_StatesAndFlags_kContTimeValid = 1 << 17,
    Steinberg_Vst_ProcessContext_StatesAndFlags_kProjectTimeMusicValid = 1 << 9,
    Steinberg_Vst_ProcessContext_StatesAndFlags_kBarPositionValid = 1 << 11,
    Steinberg_Vst_ProcessContext_StatesAndFlags_kCycleValid = 1 << 12,
    Steinberg_Vst_ProcessContext_StatesAndFlags_kTempoValid = 1 << 10,
    Steinberg_Vst_ProcessContext_StatesAndFlags_kTimeSigValid = 1 << 13,
    Steinberg_Vst_ProcessContext_StatesAndFlags_kChordValid = 1 << 18,
    Steinberg_Vst_ProcessContext_StatesAndFlags_kSmpteValid = 1 << 14,
    Steinberg_Vst_ProcessContext_StatesAndFlags_kClockValid = 1 << 15
} Steinberg_Vst_ProcessContext_StatesAndFlags;

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstevents.h", line 32 */

typedef enum
{
    Steinberg_Vst_NoteIDUserRange_kNoteIDUserRangeLowerBound = -10000,
    Steinberg_Vst_NoteIDUserRange_kNoteIDUserRangeUpperBound = -1000
} Steinberg_Vst_NoteIDUserRange;

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstevents.h", line 77 */

typedef enum
{
    Steinberg_Vst_DataEvent_DataTypes_kMidiSysEx = 0
} Steinberg_Vst_DataEvent_DataTypes;

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstevents.h", line 150 */

typedef enum
{
    Steinberg_Vst_Event_EventFlags_kIsLive = 1 << 0,
    Steinberg_Vst_Event_EventFlags_kUserReserved1 = 1 << 14,
    Steinberg_Vst_Event_EventFlags_kUserReserved2 = 1 << 15
} Steinberg_Vst_Event_EventFlags;

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstevents.h", line 159 */

typedef enum
{
    Steinberg_Vst_Event_EventTypes_kNoteOnEvent = 0,
    Steinberg_Vst_Event_EventTypes_kNoteOffEvent = 1,
    Steinberg_Vst_Event_EventTypes_kDataEvent = 2,
    Steinberg_Vst_Event_EventTypes_kPolyPressureEvent = 3,
    Steinberg_Vst_Event_EventTypes_kNoteExpressionValueEvent = 4,
    Steinberg_Vst_Event_EventTypes_kNoteExpressionTextEvent = 5,
    Steinberg_Vst_Event_EventTypes_kChordEvent = 6,
    Steinberg_Vst_Event_EventTypes_kScaleEvent = 7,
    Steinberg_Vst_Event_EventTypes_kLegacyMIDICCOutEvent = 65535
} Steinberg_Vst_Event_EventTypes;

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstcontextmenu.h", line 165 */

typedef enum
{
    Steinberg_Vst_IContextMenuItem_Flags_kIsSeparator = 1 << 0,
    Steinberg_Vst_IContextMenuItem_Flags_kIsDisabled = 1 << 1,
    Steinberg_Vst_IContextMenuItem_Flags_kIsChecked = 1 << 2,
    Steinberg_Vst_IContextMenuItem_Flags_kIsGroupStart = 1 << 3 | Steinberg_Vst_IContextMenuItem_Flags_kIsDisabled,
    Steinberg_Vst_IContextMenuItem_Flags_kIsGroupEnd = 1 << 4 | Steinberg_Vst_IContextMenuItem_Flags_kIsSeparator
} Steinberg_Vst_IContextMenuItem_Flags;

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstmidicontrollers.h", line 25 */

typedef enum
{
    Steinberg_Vst_ControllerNumbers_kCtrlBankSelectMSB = 0,
    Steinberg_Vst_ControllerNumbers_kCtrlModWheel = 1,
    Steinberg_Vst_ControllerNumbers_kCtrlBreath = 2,
    Steinberg_Vst_ControllerNumbers_kCtrlFoot = 4,
    Steinberg_Vst_ControllerNumbers_kCtrlPortaTime = 5,
    Steinberg_Vst_ControllerNumbers_kCtrlDataEntryMSB = 6,
    Steinberg_Vst_ControllerNumbers_kCtrlVolume = 7,
    Steinberg_Vst_ControllerNumbers_kCtrlBalance = 8,
    Steinberg_Vst_ControllerNumbers_kCtrlPan = 10,
    Steinberg_Vst_ControllerNumbers_kCtrlExpression = 11,
    Steinberg_Vst_ControllerNumbers_kCtrlEffect1 = 12,
    Steinberg_Vst_ControllerNumbers_kCtrlEffect2 = 13,
    Steinberg_Vst_ControllerNumbers_kCtrlGPC1 = 16,
    Steinberg_Vst_ControllerNumbers_kCtrlGPC2 = 17,
    Steinberg_Vst_ControllerNumbers_kCtrlGPC3 = 18,
    Steinberg_Vst_ControllerNumbers_kCtrlGPC4 = 19,
    Steinberg_Vst_ControllerNumbers_kCtrlBankSelectLSB = 32,
    Steinberg_Vst_ControllerNumbers_kCtrlDataEntryLSB = 38,
    Steinberg_Vst_ControllerNumbers_kCtrlSustainOnOff = 64,
    Steinberg_Vst_ControllerNumbers_kCtrlPortaOnOff = 65,
    Steinberg_Vst_ControllerNumbers_kCtrlSustenutoOnOff = 66,
    Steinberg_Vst_ControllerNumbers_kCtrlSoftPedalOnOff = 67,
    Steinberg_Vst_ControllerNumbers_kCtrlLegatoFootSwOnOff = 68,
    Steinberg_Vst_ControllerNumbers_kCtrlHold2OnOff = 69,
    Steinberg_Vst_ControllerNumbers_kCtrlSoundVariation = 70,
    Steinberg_Vst_ControllerNumbers_kCtrlFilterCutoff = 71,
    Steinberg_Vst_ControllerNumbers_kCtrlReleaseTime = 72,
    Steinberg_Vst_ControllerNumbers_kCtrlAttackTime = 73,
    Steinberg_Vst_ControllerNumbers_kCtrlFilterResonance = 74,
    Steinberg_Vst_ControllerNumbers_kCtrlDecayTime = 75,
    Steinberg_Vst_ControllerNumbers_kCtrlVibratoRate = 76,
    Steinberg_Vst_ControllerNumbers_kCtrlVibratoDepth = 77,
    Steinberg_Vst_ControllerNumbers_kCtrlVibratoDelay = 78,
    Steinberg_Vst_ControllerNumbers_kCtrlSoundCtrler10 = 79,
    Steinberg_Vst_ControllerNumbers_kCtrlGPC5 = 80,
    Steinberg_Vst_ControllerNumbers_kCtrlGPC6 = 81,
    Steinberg_Vst_ControllerNumbers_kCtrlGPC7 = 82,
    Steinberg_Vst_ControllerNumbers_kCtrlGPC8 = 83,
    Steinberg_Vst_ControllerNumbers_kCtrlPortaControl = 84,
    Steinberg_Vst_ControllerNumbers_kCtrlEff1Depth = 91,
    Steinberg_Vst_ControllerNumbers_kCtrlEff2Depth = 92,
    Steinberg_Vst_ControllerNumbers_kCtrlEff3Depth = 93,
    Steinberg_Vst_ControllerNumbers_kCtrlEff4Depth = 94,
    Steinberg_Vst_ControllerNumbers_kCtrlEff5Depth = 95,
    Steinberg_Vst_ControllerNumbers_kCtrlDataIncrement = 96,
    Steinberg_Vst_ControllerNumbers_kCtrlDataDecrement = 97,
    Steinberg_Vst_ControllerNumbers_kCtrlNRPNSelectLSB = 98,
    Steinberg_Vst_ControllerNumbers_kCtrlNRPNSelectMSB = 99,
    Steinberg_Vst_ControllerNumbers_kCtrlRPNSelectLSB = 100,
    Steinberg_Vst_ControllerNumbers_kCtrlRPNSelectMSB = 101,
    Steinberg_Vst_ControllerNumbers_kCtrlAllSoundsOff = 120,
    Steinberg_Vst_ControllerNumbers_kCtrlResetAllCtrlers = 121,
    Steinberg_Vst_ControllerNumbers_kCtrlLocalCtrlOnOff = 122,
    Steinberg_Vst_ControllerNumbers_kCtrlAllNotesOff = 123,
    Steinberg_Vst_ControllerNumbers_kCtrlOmniModeOff = 124,
    Steinberg_Vst_ControllerNumbers_kCtrlOmniModeOn = 125,
    Steinberg_Vst_ControllerNumbers_kCtrlPolyModeOnOff = 126,
    Steinberg_Vst_ControllerNumbers_kCtrlPolyModeOn = 127,
    Steinberg_Vst_ControllerNumbers_kAfterTouch = 128,
    Steinberg_Vst_ControllerNumbers_kPitchBend = 129,
    Steinberg_Vst_ControllerNumbers_kCountCtrlNumber,
    Steinberg_Vst_ControllerNumbers_kCtrlProgramChange = 130,
    Steinberg_Vst_ControllerNumbers_kCtrlPolyPressure = 131,
    Steinberg_Vst_ControllerNumbers_kCtrlQuarterFrame = 132
} Steinberg_Vst_ControllerNumbers;

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstchannelcontextinfo.h", line 162 */

typedef enum
{
    Steinberg_Vst_ChannelContext_ChannelPluginLocation_kPreVolumeFader = 0,
    Steinberg_Vst_ChannelContext_ChannelPluginLocation_kPostVolumeFader,
    Steinberg_Vst_ChannelContext_ChannelPluginLocation_kUsedAsPanner
} Steinberg_Vst_ChannelContext_ChannelPluginLocation;

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstprefetchablesupport.h", line 39 */

typedef enum
{
    Steinberg_Vst_ePrefetchableSupport_kIsNeverPrefetchable = 0,
    Steinberg_Vst_ePrefetchableSupport_kIsYetPrefetchable,
    Steinberg_Vst_ePrefetchableSupport_kIsNotYetPrefetchable,
    Steinberg_Vst_ePrefetchableSupport_kNumPrefetchableSupport
} Steinberg_Vst_ePrefetchableSupport;

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstautomationstate.h", line 43 */

typedef enum
{
    Steinberg_Vst_IAutomationState_AutomationStates_kNoAutomation = 0,
    Steinberg_Vst_IAutomationState_AutomationStates_kReadState = 1 << 0,
    Steinberg_Vst_IAutomationState_AutomationStates_kWriteState = 1 << 1,
    Steinberg_Vst_IAutomationState_AutomationStates_kReadWriteState = Steinberg_Vst_IAutomationState_AutomationStates_kReadState | Steinberg_Vst_IAutomationState_AutomationStates_kWriteState
} Steinberg_Vst_IAutomationState_AutomationStates;

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstaudioprocessor.h", line 98 */

typedef enum
{
    Steinberg_Vst_ComponentFlags_kDistributable = 1 << 0,
    Steinberg_Vst_ComponentFlags_kSimpleModeSupported = 1 << 1
} Steinberg_Vst_ComponentFlags;

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstaudioprocessor.h", line 110 */

typedef enum
{
    Steinberg_Vst_SymbolicSampleSizes_kSample32,
    Steinberg_Vst_SymbolicSampleSizes_kSample64
} Steinberg_Vst_SymbolicSampleSizes;

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstaudioprocessor.h", line 138 */

typedef enum
{
    Steinberg_Vst_ProcessModes_kRealtime,
    Steinberg_Vst_ProcessModes_kPrefetch,
    Steinberg_Vst_ProcessModes_kOffline
} Steinberg_Vst_ProcessModes;

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstaudioprocessor.h", line 402 */

typedef enum
{
    Steinberg_Vst_IProcessContextRequirements_Flags_kNeedSystemTime = 1 << 0,
    Steinberg_Vst_IProcessContextRequirements_Flags_kNeedContinousTimeSamples = 1 << 1,
    Steinberg_Vst_IProcessContextRequirements_Flags_kNeedProjectTimeMusic = 1 << 2,
    Steinberg_Vst_IProcessContextRequirements_Flags_kNeedBarPositionMusic = 1 << 3,
    Steinberg_Vst_IProcessContextRequirements_Flags_kNeedCycleMusic = 1 << 4,
    Steinberg_Vst_IProcessContextRequirements_Flags_kNeedSamplesToNextClock = 1 << 5,
    Steinberg_Vst_IProcessContextRequirements_Flags_kNeedTempo = 1 << 6,
    Steinberg_Vst_IProcessContextRequirements_Flags_kNeedTimeSignature = 1 << 7,
    Steinberg_Vst_IProcessContextRequirements_Flags_kNeedChord = 1 << 8,
    Steinberg_Vst_IProcessContextRequirements_Flags_kNeedFrameRate = 1 << 9,
    Steinberg_Vst_IProcessContextRequirements_Flags_kNeedTransportState = 1 << 10
} Steinberg_Vst_IProcessContextRequirements_Flags;


/*----------------------------------------------------------------------------------------------------------------------
----- Variable declarations --------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------*/

static const Steinberg_int32 Steinberg_kMaxInt32 = INT32_MAX;
static const Steinberg_int32 Steinberg_kMinInt32 = INT32_MIN;
static const Steinberg_int32 Steinberg_kMaxLong = INT32_MAX;
static const Steinberg_int32 Steinberg_kMinLong = INT32_MIN;
static const Steinberg_uint32 Steinberg_kMaxInt32u = UINT32_MAX;
static const Steinberg_int64 Steinberg_kMaxInt64 = INT64_MAX;
static const Steinberg_int64 Steinberg_kMinInt64 = INT64_MIN;
static const Steinberg_uint64 Steinberg_kMaxInt64u = UINT64_MAX;
static const Steinberg_FIDString Steinberg_kPlatformStringWin = "WIN";
static const Steinberg_FIDString Steinberg_kPlatformStringMac = "MAC";
static const Steinberg_FIDString Steinberg_kPlatformStringIOS = "IOS";
static const Steinberg_FIDString Steinberg_kPlatformStringLinux = "Linux";
static const Steinberg_FIDString Steinberg_kPlatformString = "MAC";
static const Steinberg_UCoord Steinberg_kMaxCoord = ((Steinberg_UCoord) 0x7FFFFFFF);
static const Steinberg_UCoord Steinberg_kMinCoord = ((Steinberg_UCoord) -0x7FFFFFFF);
static const Steinberg_FIDString Steinberg_kPlatformTypeHWND = "HWND";
static const Steinberg_FIDString Steinberg_kPlatformTypeHIView = "HIView";
static const Steinberg_FIDString Steinberg_kPlatformTypeNSView = "NSView";
static const Steinberg_FIDString Steinberg_kPlatformTypeUIView = "UIView";
static const Steinberg_FIDString Steinberg_kPlatformTypeX11EmbedWindowID = "X11EmbedWindowID";
static const Steinberg_uint32 Steinberg_kPrintfBufferSize = 4096;
static const Steinberg_Vst_ParamID Steinberg_Vst_kNoParamId = 0xffffffff;
static const Steinberg_FIDString Steinberg_Vst_SDKVersionString = "VST 3.7.8";
static const Steinberg_uint32 Steinberg_Vst_SDKVersionMajor = 3;
static const Steinberg_uint32 Steinberg_Vst_SDKVersionMinor = 7;
static const Steinberg_uint32 Steinberg_Vst_SDKVersionSub = 8;
static const Steinberg_uint32 Steinberg_Vst_SDKVersion = ((3 << 16) | (7 << 8) | 8);
static const Steinberg_uint32 Steinberg_Vst_SDKVersion_3_7_7 = 0x030707;
static const Steinberg_uint32 Steinberg_Vst_SDKVersion_3_7_6 = 0x030706;
static const Steinberg_uint32 Steinberg_Vst_SDKVersion_3_7_5 = 0x030705;
static const Steinberg_uint32 Steinberg_Vst_SDKVersion_3_7_4 = 0x030704;
static const Steinberg_uint32 Steinberg_Vst_SDKVersion_3_7_3 = 0x030703;
static const Steinberg_uint32 Steinberg_Vst_SDKVersion_3_7_2 = 0x030702;
static const Steinberg_uint32 Steinberg_Vst_SDKVersion_3_7_1 = 0x030701;
static const Steinberg_uint32 Steinberg_Vst_SDKVersion_3_7_0 = 0x030700;
static const Steinberg_uint32 Steinberg_Vst_SDKVersion_3_6_14 = 0x03060E;
static const Steinberg_uint32 Steinberg_Vst_SDKVersion_3_6_13 = 0x03060D;
static const Steinberg_uint32 Steinberg_Vst_SDKVersion_3_6_12 = 0x03060C;
static const Steinberg_uint32 Steinberg_Vst_SDKVersion_3_6_11 = 0x03060B;
static const Steinberg_uint32 Steinberg_Vst_SDKVersion_3_6_10 = 0x03060A;
static const Steinberg_uint32 Steinberg_Vst_SDKVersion_3_6_9 = 0x030609;
static const Steinberg_uint32 Steinberg_Vst_SDKVersion_3_6_8 = 0x030608;
static const Steinberg_uint32 Steinberg_Vst_SDKVersion_3_6_7 = 0x030607;
static const Steinberg_uint32 Steinberg_Vst_SDKVersion_3_6_6 = 0x030606;
static const Steinberg_uint32 Steinberg_Vst_SDKVersion_3_6_5 = 0x030605;
static const Steinberg_uint32 Steinberg_Vst_SDKVersion_3_6_0 = 0x030600;
static const Steinberg_uint32 Steinberg_Vst_SDKVersion_3_5_0 = 0x030500;
static const Steinberg_uint32 Steinberg_Vst_SDKVersion_3_1_0 = 0x030100;
static const Steinberg_uint32 Steinberg_Vst_SDKVersion_3_0_0 = 0x030000;
static const Steinberg_int32 Steinberg_Vst_kDefaultFactoryFlags = 1 << 4;
static const Steinberg_Vst_CString Steinberg_Vst_PresetAttributes_kPlugInName = "PlugInName";
static const Steinberg_Vst_CString Steinberg_Vst_PresetAttributes_kPlugInCategory = "PlugInCategory";
static const Steinberg_Vst_CString Steinberg_Vst_PresetAttributes_kInstrument = "MusicalInstrument";
static const Steinberg_Vst_CString Steinberg_Vst_PresetAttributes_kStyle = "MusicalStyle";
static const Steinberg_Vst_CString Steinberg_Vst_PresetAttributes_kCharacter = "MusicalCharacter";
static const Steinberg_Vst_CString Steinberg_Vst_PresetAttributes_kStateType = "StateType";
static const Steinberg_Vst_CString Steinberg_Vst_PresetAttributes_kFilePathStringType = "FilePathString";
static const Steinberg_Vst_CString Steinberg_Vst_PresetAttributes_kName = "Name";
static const Steinberg_Vst_CString Steinberg_Vst_PresetAttributes_kFileName = "FileName";
static const Steinberg_Vst_CString Steinberg_Vst_StateType_kProject = "Project";
static const Steinberg_Vst_CString Steinberg_Vst_StateType_kDefault = "Default";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kAccordion = "Accordion";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kAccordionAccordion = "Accordion|Accordion";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kAccordionHarmonica = "Accordion|Harmonica";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kAccordionOther = "Accordion|Other";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kBass = "Bass";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kBassABass = "Bass|A. Bass";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kBassEBass = "Bass|E. Bass";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kBassSynthBass = "Bass|Synth Bass";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kBassOther = "Bass|Other";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kBrass = "Brass";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kBrassFrenchHorn = "Brass|French Horn";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kBrassTrumpet = "Brass|Trumpet";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kBrassTrombone = "Brass|Trombone";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kBrassTuba = "Brass|Tuba";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kBrassSection = "Brass|Section";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kBrassSynth = "Brass|Synth";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kBrassOther = "Brass|Other";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kChromaticPerc = "Chromatic Perc";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kChromaticPercBell = "Chromatic Perc|Bell";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kChromaticPercMallett = "Chromatic Perc|Mallett";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kChromaticPercWood = "Chromatic Perc|Wood";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kChromaticPercPercussion = "Chromatic Perc|Percussion";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kChromaticPercTimpani = "Chromatic Perc|Timpani";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kChromaticPercOther = "Chromatic Perc|Other";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kDrumPerc = "Drum&Perc";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kDrumPercDrumsetGM = "Drum&Perc|Drumset GM";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kDrumPercDrumset = "Drum&Perc|Drumset";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kDrumPercDrumMenues = "Drum&Perc|Drum Menues";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kDrumPercBeats = "Drum&Perc|Beats";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kDrumPercPercussion = "Drum&Perc|Percussion";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kDrumPercKickDrum = "Drum&Perc|Kick Drum";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kDrumPercSnareDrum = "Drum&Perc|Snare Drum";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kDrumPercToms = "Drum&Perc|Toms";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kDrumPercHiHats = "Drum&Perc|HiHats";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kDrumPercCymbals = "Drum&Perc|Cymbals";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kDrumPercOther = "Drum&Perc|Other";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kEthnic = "Ethnic";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kEthnicAsian = "Ethnic|Asian";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kEthnicAfrican = "Ethnic|African";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kEthnicEuropean = "Ethnic|European";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kEthnicLatin = "Ethnic|Latin";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kEthnicAmerican = "Ethnic|American";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kEthnicAlien = "Ethnic|Alien";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kEthnicOther = "Ethnic|Other";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kGuitar = "Guitar/Plucked";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kGuitarAGuitar = "Guitar/Plucked|A. Guitar";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kGuitarEGuitar = "Guitar/Plucked|E. Guitar";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kGuitarHarp = "Guitar/Plucked|Harp";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kGuitarEthnic = "Guitar/Plucked|Ethnic";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kGuitarOther = "Guitar/Plucked|Other";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kKeyboard = "Keyboard";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kKeyboardClavi = "Keyboard|Clavi";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kKeyboardEPiano = "Keyboard|E. Piano";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kKeyboardHarpsichord = "Keyboard|Harpsichord";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kKeyboardOther = "Keyboard|Other";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kMusicalFX = "Musical FX";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kMusicalFXHitsStabs = "Musical FX|Hits&Stabs";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kMusicalFXMotion = "Musical FX|Motion";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kMusicalFXSweeps = "Musical FX|Sweeps";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kMusicalFXBeepsBlips = "Musical FX|Beeps&Blips";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kMusicalFXScratches = "Musical FX|Scratches";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kMusicalFXOther = "Musical FX|Other";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kOrgan = "Organ";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kOrganElectric = "Organ|Electric";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kOrganPipe = "Organ|Pipe";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kOrganOther = "Organ|Other";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kPiano = "Piano";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kPianoAPiano = "Piano|A. Piano";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kPianoEGrand = "Piano|E. Grand";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kPianoOther = "Piano|Other";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kSoundFX = "Sound FX";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kSoundFXNature = "Sound FX|Nature";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kSoundFXMechanical = "Sound FX|Mechanical";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kSoundFXSynthetic = "Sound FX|Synthetic";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kSoundFXOther = "Sound FX|Other";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kStrings = "Strings";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kStringsViolin = "Strings|Violin";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kStringsViola = "Strings|Viola";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kStringsCello = "Strings|Cello";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kStringsBass = "Strings|Bass";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kStringsSection = "Strings|Section";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kStringsSynth = "Strings|Synth";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kStringsOther = "Strings|Other";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kSynthLead = "Synth Lead";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kSynthLeadAnalog = "Synth Lead|Analog";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kSynthLeadDigital = "Synth Lead|Digital";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kSynthLeadArpeggio = "Synth Lead|Arpeggio";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kSynthLeadOther = "Synth Lead|Other";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kSynthPad = "Synth Pad";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kSynthPadSynthChoir = "Synth Pad|Synth Choir";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kSynthPadAnalog = "Synth Pad|Analog";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kSynthPadDigital = "Synth Pad|Digital";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kSynthPadMotion = "Synth Pad|Motion";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kSynthPadOther = "Synth Pad|Other";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kSynthComp = "Synth Comp";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kSynthCompAnalog = "Synth Comp|Analog";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kSynthCompDigital = "Synth Comp|Digital";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kSynthCompOther = "Synth Comp|Other";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kVocal = "Vocal";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kVocalLeadVocal = "Vocal|Lead Vocal";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kVocalAdlibs = "Vocal|Adlibs";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kVocalChoir = "Vocal|Choir";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kVocalSolo = "Vocal|Solo";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kVocalFX = "Vocal|FX";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kVocalSpoken = "Vocal|Spoken";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kVocalOther = "Vocal|Other";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kWoodwinds = "Woodwinds";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kWoodwindsEthnic = "Woodwinds|Ethnic";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kWoodwindsFlute = "Woodwinds|Flute";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kWoodwindsOboe = "Woodwinds|Oboe";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kWoodwindsEnglHorn = "Woodwinds|Engl. Horn";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kWoodwindsClarinet = "Woodwinds|Clarinet";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kWoodwindsSaxophone = "Woodwinds|Saxophone";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kWoodwindsBassoon = "Woodwinds|Bassoon";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalInstrument_kWoodwindsOther = "Woodwinds|Other";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kAlternativeIndie = "Alternative/Indie";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kAlternativeIndieGothRock = "Alternative/Indie|Goth Rock";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kAlternativeIndieGrunge = "Alternative/Indie|Grunge";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kAlternativeIndieNewWave = "Alternative/Indie|New Wave";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kAlternativeIndiePunk = "Alternative/Indie|Punk";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kAlternativeIndieCollegeRock = "Alternative/Indie|College Rock";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kAlternativeIndieDarkWave = "Alternative/Indie|Dark Wave";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kAlternativeIndieHardcore = "Alternative/Indie|Hardcore";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kAmbientChillOut = "Ambient/ChillOut";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kAmbientChillOutNewAgeMeditation = "Ambient/ChillOut|New Age/Meditation";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kAmbientChillOutDarkAmbient = "Ambient/ChillOut|Dark Ambient";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kAmbientChillOutDowntempo = "Ambient/ChillOut|Downtempo";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kAmbientChillOutLounge = "Ambient/ChillOut|Lounge";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kBlues = "Blues";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kBluesAcousticBlues = "Blues|Acoustic Blues";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kBluesCountryBlues = "Blues|Country Blues";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kBluesElectricBlues = "Blues|Electric Blues";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kBluesChicagoBlues = "Blues|Chicago Blues";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kClassical = "Classical";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kClassicalBaroque = "Classical|Baroque";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kClassicalChamberMusic = "Classical|Chamber Music";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kClassicalMedieval = "Classical|Medieval";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kClassicalModernComposition = "Classical|Modern Composition";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kClassicalOpera = "Classical|Opera";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kClassicalGregorian = "Classical|Gregorian";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kClassicalRenaissance = "Classical|Renaissance";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kClassicalClassic = "Classical|Classic";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kClassicalRomantic = "Classical|Romantic";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kClassicalSoundtrack = "Classical|Soundtrack";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kCountry = "Country";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kCountryCountryWestern = "Country|Country/Western";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kCountryHonkyTonk = "Country|Honky Tonk";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kCountryUrbanCowboy = "Country|Urban Cowboy";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kCountryBluegrass = "Country|Bluegrass";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kCountryAmericana = "Country|Americana";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kCountrySquaredance = "Country|Squaredance";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kCountryNorthAmericanFolk = "Country|North American Folk";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kElectronicaDance = "Electronica/Dance";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kElectronicaDanceMinimal = "Electronica/Dance|Minimal";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kElectronicaDanceClassicHouse = "Electronica/Dance|Classic House";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kElectronicaDanceElektroHouse = "Electronica/Dance|Elektro House";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kElectronicaDanceFunkyHouse = "Electronica/Dance|Funky House";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kElectronicaDanceIndustrial = "Electronica/Dance|Industrial";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kElectronicaDanceElectronicBodyMusic = "Electronica/Dance|Electronic Body Music";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kElectronicaDanceTripHop = "Electronica/Dance|Trip Hop";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kElectronicaDanceTechno = "Electronica/Dance|Techno";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kElectronicaDanceDrumNBassJungle = "Electronica/Dance|Drum'n'Bass/Jungle";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kElectronicaDanceElektro = "Electronica/Dance|Elektro";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kElectronicaDanceTrance = "Electronica/Dance|Trance";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kElectronicaDanceDub = "Electronica/Dance|Dub";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kElectronicaDanceBigBeats = "Electronica/Dance|Big Beats";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kExperimental = "Experimental";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kExperimentalNewMusic = "Experimental|New Music";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kExperimentalFreeImprovisation = "Experimental|Free Improvisation";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kExperimentalElectronicArtMusic = "Experimental|Electronic Art Music";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kExperimentalNoise = "Experimental|Noise";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kJazz = "Jazz";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kJazzNewOrleansJazz = "Jazz|New Orleans Jazz";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kJazzTraditionalJazz = "Jazz|Traditional Jazz";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kJazzOldtimeJazzDixiland = "Jazz|Oldtime Jazz/Dixiland";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kJazzFusion = "Jazz|Fusion";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kJazzAvantgarde = "Jazz|Avantgarde";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kJazzLatinJazz = "Jazz|Latin Jazz";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kJazzFreeJazz = "Jazz|Free Jazz";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kJazzRagtime = "Jazz|Ragtime";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kPop = "Pop";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kPopBritpop = "Pop|Britpop";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kPopRock = "Pop|Pop/Rock";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kPopTeenPop = "Pop|Teen Pop";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kPopChartDance = "Pop|Chart Dance";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kPop80sPop = "Pop|80's Pop";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kPopDancehall = "Pop|Dancehall";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kPopDisco = "Pop|Disco";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kRockMetal = "Rock/Metal";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kRockMetalBluesRock = "Rock/Metal|Blues Rock";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kRockMetalClassicRock = "Rock/Metal|Classic Rock";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kRockMetalHardRock = "Rock/Metal|Hard Rock";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kRockMetalRockRoll = "Rock/Metal|Rock &amp; Roll";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kRockMetalSingerSongwriter = "Rock/Metal|Singer/Songwriter";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kRockMetalHeavyMetal = "Rock/Metal|Heavy Metal";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kRockMetalDeathBlackMetal = "Rock/Metal|Death/Black Metal";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kRockMetalNuMetal = "Rock/Metal|NuMetal";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kRockMetalReggae = "Rock/Metal|Reggae";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kRockMetalBallad = "Rock/Metal|Ballad";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kRockMetalAlternativeRock = "Rock/Metal|Alternative Rock";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kRockMetalRockabilly = "Rock/Metal|Rockabilly";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kRockMetalThrashMetal = "Rock/Metal|Thrash Metal";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kRockMetalProgressiveRock = "Rock/Metal|Progressive Rock";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kUrbanHipHopRB = "Urban (Hip-Hop / R&B)";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kUrbanHipHopRBClassic = "Urban (Hip-Hop / R&B)|Classic R&B";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kUrbanHipHopRBModern = "Urban (Hip-Hop / R&B)|Modern R&B";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kUrbanHipHopRBPop = "Urban (Hip-Hop / R&B)|R&B Pop";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kUrbanHipHopRBWestCoastHipHop = "Urban (Hip-Hop / R&B)|WestCoast Hip-Hop";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kUrbanHipHopRBEastCoastHipHop = "Urban (Hip-Hop / R&B)|EastCoast Hip-Hop";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kUrbanHipHopRBRapHipHop = "Urban (Hip-Hop / R&B)|Rap/Hip Hop";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kUrbanHipHopRBSoul = "Urban (Hip-Hop / R&B)|Soul";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kUrbanHipHopRBFunk = "Urban (Hip-Hop / R&B)|Funk";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kWorldEthnic = "World/Ethnic";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kWorldEthnicAfrica = "World/Ethnic|Africa";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kWorldEthnicAsia = "World/Ethnic|Asia";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kWorldEthnicCeltic = "World/Ethnic|Celtic";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kWorldEthnicEurope = "World/Ethnic|Europe";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kWorldEthnicKlezmer = "World/Ethnic|Klezmer";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kWorldEthnicScandinavia = "World/Ethnic|Scandinavia";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kWorldEthnicEasternEurope = "World/Ethnic|Eastern Europe";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kWorldEthnicIndiaOriental = "World/Ethnic|India/Oriental";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kWorldEthnicNorthAmerica = "World/Ethnic|North America";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kWorldEthnicSouthAmerica = "World/Ethnic|South America";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalStyle_kWorldEthnicAustralia = "World/Ethnic|Australia";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kMono = "Mono";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kPoly = "Poly";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kSplit = "Split";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kLayer = "Layer";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kGlide = "Glide";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kGlissando = "Glissando";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kMajor = "Major";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kMinor = "Minor";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kSingle = "Single";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kEnsemble = "Ensemble";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kAcoustic = "Acoustic";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kElectric = "Electric";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kAnalog = "Analog";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kDigital = "Digital";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kVintage = "Vintage";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kModern = "Modern";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kOld = "Old";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kNew = "New";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kClean = "Clean";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kDistorted = "Distorted";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kDry = "Dry";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kProcessed = "Processed";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kHarmonic = "Harmonic";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kDissonant = "Dissonant";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kClear = "Clear";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kNoisy = "Noisy";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kThin = "Thin";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kRich = "Rich";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kDark = "Dark";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kBright = "Bright";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kCold = "Cold";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kWarm = "Warm";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kMetallic = "Metallic";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kWooden = "Wooden";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kGlass = "Glass";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kPlastic = "Plastic";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kPercussive = "Percussive";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kSoft = "Soft";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kFast = "Fast";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kSlow = "Slow";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kShort = "Short";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kLong = "Long";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kAttack = "Attack";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kRelease = "Release";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kDecay = "Decay";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kSustain = "Sustain";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kFastAttack = "Fast Attack";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kSlowAttack = "Slow Attack";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kShortRelease = "Short Release";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kLongRelease = "Long Release";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kStatic = "Static";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kMoving = "Moving";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kLoop = "Loop";
static const Steinberg_Vst_CString Steinberg_Vst_MusicalCharacter_kOneShot = "One Shot";
static const Steinberg_Vst_CString Steinberg_Vst_ViewType_kEditor = "editor";
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerL = 1 << 0;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerR = 1 << 1;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerC = 1 << 2;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerLfe = 1 << 3;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerLs = 1 << 4;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerRs = 1 << 5;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerLc = 1 << 6;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerRc = 1 << 7;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerS = 1 << 8;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerCs = 1 << 8;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerSl = 1 << 9;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerSr = 1 << 10;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerTc = 1 << 11;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerTfl = 1 << 12;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerTfc = 1 << 13;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerTfr = 1 << 14;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerTrl = 1 << 15;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerTrc = 1 << 16;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerTrr = 1 << 17;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerLfe2 = 1 << 18;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerM = 1 << 19;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerACN0 = (Steinberg_Vst_Speaker) 1 << 20;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerACN1 = (Steinberg_Vst_Speaker) 1 << 21;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerACN2 = (Steinberg_Vst_Speaker) 1 << 22;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerACN3 = (Steinberg_Vst_Speaker) 1 << 23;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerACN4 = (Steinberg_Vst_Speaker) 1 << 38;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerACN5 = (Steinberg_Vst_Speaker) 1 << 39;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerACN6 = (Steinberg_Vst_Speaker) 1 << 40;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerACN7 = (Steinberg_Vst_Speaker) 1 << 41;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerACN8 = (Steinberg_Vst_Speaker) 1 << 42;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerACN9 = (Steinberg_Vst_Speaker) 1 << 43;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerACN10 = (Steinberg_Vst_Speaker) 1 << 44;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerACN11 = (Steinberg_Vst_Speaker) 1 << 45;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerACN12 = (Steinberg_Vst_Speaker) 1 << 46;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerACN13 = (Steinberg_Vst_Speaker) 1 << 47;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerACN14 = (Steinberg_Vst_Speaker) 1 << 48;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerACN15 = (Steinberg_Vst_Speaker) 1 << 49;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerACN16 = (Steinberg_Vst_Speaker) 1 << 50;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerACN17 = (Steinberg_Vst_Speaker) 1 << 51;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerACN18 = (Steinberg_Vst_Speaker) 1 << 52;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerACN19 = (Steinberg_Vst_Speaker) 1 << 53;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerACN20 = (Steinberg_Vst_Speaker) 1 << 54;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerACN21 = (Steinberg_Vst_Speaker) 1 << 55;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerACN22 = (Steinberg_Vst_Speaker) 1 << 56;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerACN23 = (Steinberg_Vst_Speaker) 1 << 57;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerACN24 = (Steinberg_Vst_Speaker) 1 << 58;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerTsl = (Steinberg_Vst_Speaker) 1 << 24;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerTsr = (Steinberg_Vst_Speaker) 1 << 25;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerLcs = (Steinberg_Vst_Speaker) 1 << 26;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerRcs = (Steinberg_Vst_Speaker) 1 << 27;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerBfl = (Steinberg_Vst_Speaker) 1 << 28;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerBfc = (Steinberg_Vst_Speaker) 1 << 29;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerBfr = (Steinberg_Vst_Speaker) 1 << 30;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerPl = (Steinberg_Vst_Speaker) 1 << 31;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerPr = (Steinberg_Vst_Speaker) 1 << 32;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerBsl = (Steinberg_Vst_Speaker) 1 << 33;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerBsr = (Steinberg_Vst_Speaker) 1 << 34;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerBrl = (Steinberg_Vst_Speaker) 1 << 35;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerBrc = (Steinberg_Vst_Speaker) 1 << 36;
static const Steinberg_Vst_Speaker Steinberg_Vst_kSpeakerBrr = (Steinberg_Vst_Speaker) 1 << 37;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_kEmpty = 0;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_kMono = 1 << 19;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_kStereo = 1 << 0 | 1 << 1;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_kStereoSurround = 1 << 4 | 1 << 5;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_kStereoCenter = 1 << 6 | 1 << 7;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_kStereoSide = 1 << 9 | 1 << 10;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_kStereoCLfe = 1 << 2 | 1 << 3;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_kStereoTF = 1 << 12 | 1 << 14;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_kStereoTS = (Steinberg_Vst_Speaker) 1 << 24 | (Steinberg_Vst_Speaker) 1 << 25;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_kStereoTR = 1 << 15 | 1 << 17;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_kStereoBF = (Steinberg_Vst_Speaker) 1 << 28 | (Steinberg_Vst_Speaker) 1 << 30;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_kCineFront = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 6 | 1 << 7;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k30Cine = 1 << 0 | 1 << 1 | 1 << 2;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k31Cine = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 3;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k30Music = 1 << 0 | 1 << 1 | 1 << 8;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k31Music = 1 << 0 | 1 << 1 | 1 << 8 | 1 << 3;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k40Cine = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 8;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k41Cine = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 8 | 1 << 3;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k40Music = 1 << 0 | 1 << 1 | 1 << 4 | 1 << 5;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k41Music = 1 << 0 | 1 << 1 | 1 << 4 | 1 << 5 | 1 << 3;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k50 = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k51 = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 3;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k60Cine = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 8;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k61Cine = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 8 | 1 << 3;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k60Music = 1 << 0 | 1 << 1 | 1 << 4 | 1 << 5 | 1 << 9 | 1 << 10;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k61Music = 1 << 0 | 1 << 1 | 1 << 4 | 1 << 5 | 1 << 9 | 1 << 10 | 1 << 3;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k70Cine = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 6 | 1 << 7;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k71Cine = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 6 | 1 << 7 | 1 << 3;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k71CineFullFront = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 6 | 1 << 7 | 1 << 3;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k70Music = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 9 | 1 << 10;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k71Music = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 9 | 1 << 10 | 1 << 3;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k71CineFullRear = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 3 | 1 << 4 | 1 << 5 | (Steinberg_Vst_Speaker) 1 << 26 | (Steinberg_Vst_Speaker) 1 << 27;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k71CineSideFill = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 9 | 1 << 10 | 1 << 3;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k71Proximity = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 3 | 1 << 4 | 1 << 5 | (Steinberg_Vst_Speaker) 1 << 31 | (Steinberg_Vst_Speaker) 1 << 32;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k80Cine = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 6 | 1 << 7 | 1 << 8;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k81Cine = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 6 | 1 << 7 | 1 << 8 | 1 << 3;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k80Music = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 8 | 1 << 9 | 1 << 10;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k81Music = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 8 | 1 << 9 | 1 << 10 | 1 << 3;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k90Cine = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 6 | 1 << 7 | 1 << 9 | 1 << 10;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k91Cine = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 6 | 1 << 7 | 1 << 9 | 1 << 10 | 1 << 3;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k100Cine = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 6 | 1 << 7 | 1 << 8 | 1 << 9 | 1 << 10;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k101Cine = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 6 | 1 << 7 | 1 << 8 | 1 << 9 | 1 << 10 | 1 << 3;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_kAmbi1stOrderACN = (Steinberg_Vst_Speaker) 1 << 20 | (Steinberg_Vst_Speaker) 1 << 21 | (Steinberg_Vst_Speaker) 1 << 22 | (Steinberg_Vst_Speaker) 1 << 23;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_kAmbi2cdOrderACN = (Steinberg_Vst_Speaker) 1 << 20 | (Steinberg_Vst_Speaker) 1 << 21 | (Steinberg_Vst_Speaker) 1 << 22 | (Steinberg_Vst_Speaker) 1 << 23 | (Steinberg_Vst_Speaker) 1 << 38 | (Steinberg_Vst_Speaker) 1 << 39 | (Steinberg_Vst_Speaker) 1 << 40 | (Steinberg_Vst_Speaker) 1 << 41 | (Steinberg_Vst_Speaker) 1 << 42;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_kAmbi3rdOrderACN = (Steinberg_Vst_Speaker) 1 << 20 | (Steinberg_Vst_Speaker) 1 << 21 | (Steinberg_Vst_Speaker) 1 << 22 | (Steinberg_Vst_Speaker) 1 << 23 | (Steinberg_Vst_Speaker) 1 << 38 | (Steinberg_Vst_Speaker) 1 << 39 | (Steinberg_Vst_Speaker) 1 << 40 | (Steinberg_Vst_Speaker) 1 << 41 | (Steinberg_Vst_Speaker) 1 << 42 | (Steinberg_Vst_Speaker) 1 << 43 | (Steinberg_Vst_Speaker) 1 << 44 | (Steinberg_Vst_Speaker) 1 << 45 | (Steinberg_Vst_Speaker) 1 << 46 | (Steinberg_Vst_Speaker) 1 << 47 | (Steinberg_Vst_Speaker) 1 << 48 | (Steinberg_Vst_Speaker) 1 << 49;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_kAmbi4thOrderACN = (Steinberg_Vst_Speaker) 1 << 20 | (Steinberg_Vst_Speaker) 1 << 21 | (Steinberg_Vst_Speaker) 1 << 22 | (Steinberg_Vst_Speaker) 1 << 23 | (Steinberg_Vst_Speaker) 1 << 38 | (Steinberg_Vst_Speaker) 1 << 39 | (Steinberg_Vst_Speaker) 1 << 40 | (Steinberg_Vst_Speaker) 1 << 41 | (Steinberg_Vst_Speaker) 1 << 42 | (Steinberg_Vst_Speaker) 1 << 43 | (Steinberg_Vst_Speaker) 1 << 44 | (Steinberg_Vst_Speaker) 1 << 45 | (Steinberg_Vst_Speaker) 1 << 46 | (Steinberg_Vst_Speaker) 1 << 47 | (Steinberg_Vst_Speaker) 1 << 48 | (Steinberg_Vst_Speaker) 1 << 49 | (Steinberg_Vst_Speaker) 1 << 50 | (Steinberg_Vst_Speaker) 1 << 51 | (Steinberg_Vst_Speaker) 1 << 52 | (Steinberg_Vst_Speaker) 1 << 53 | (Steinberg_Vst_Speaker) 1 << 54 | (Steinberg_Vst_Speaker) 1 << 55 | (Steinberg_Vst_Speaker) 1 << 56 | (Steinberg_Vst_Speaker) 1 << 57 | (Steinberg_Vst_Speaker) 1 << 58;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_kAmbi5thOrderACN = 0x000FFFFFFFFF;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_kAmbi6thOrderACN = 0x0001FFFFFFFFFFFF;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_kAmbi7thOrderACN = 0xFFFFFFFFFFFFFFFF;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k80Cube = 1 << 0 | 1 << 1 | 1 << 4 | 1 << 5 | 1 << 12 | 1 << 14 | 1 << 15 | 1 << 17;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k40_4 = 1 << 0 | 1 << 1 | 1 << 4 | 1 << 5 | 1 << 12 | 1 << 14 | 1 << 15 | 1 << 17;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k71CineTopCenter = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 3 | 1 << 4 | 1 << 5 | 1 << 8 | 1 << 11;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k71CineCenterHigh = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 3 | 1 << 4 | 1 << 5 | 1 << 8 | 1 << 13;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k70CineFrontHigh = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 12 | 1 << 14;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k70MPEG3D = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 12 | 1 << 14;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k50_2 = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 12 | 1 << 14;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k71CineFrontHigh = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 12 | 1 << 14 | 1 << 3;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k71MPEG3D = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 12 | 1 << 14 | 1 << 3;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k51_2 = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 12 | 1 << 14 | 1 << 3;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k70CineSideHigh = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | (Steinberg_Vst_Speaker) 1 << 24 | (Steinberg_Vst_Speaker) 1 << 25;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k50_2_TS = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | (Steinberg_Vst_Speaker) 1 << 24 | (Steinberg_Vst_Speaker) 1 << 25;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k71CineSideHigh = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | (Steinberg_Vst_Speaker) 1 << 24 | (Steinberg_Vst_Speaker) 1 << 25 | 1 << 3;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k51_2_TS = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | (Steinberg_Vst_Speaker) 1 << 24 | (Steinberg_Vst_Speaker) 1 << 25 | 1 << 3;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k81MPEG3D = 1 << 0 | 1 << 1 | 1 << 3 | 1 << 4 | 1 << 5 | 1 << 12 | 1 << 13 | 1 << 14 | (Steinberg_Vst_Speaker) 1 << 29;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k41_4_1 = 1 << 0 | 1 << 1 | 1 << 3 | 1 << 4 | 1 << 5 | 1 << 12 | 1 << 13 | 1 << 14 | (Steinberg_Vst_Speaker) 1 << 29;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k90 = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 12 | 1 << 14 | 1 << 15 | 1 << 17;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k50_4 = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 12 | 1 << 14 | 1 << 15 | 1 << 17;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k91 = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 12 | 1 << 14 | 1 << 15 | 1 << 17 | 1 << 3;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k51_4 = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 12 | 1 << 14 | 1 << 15 | 1 << 17 | 1 << 3;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k50_4_1 = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 12 | 1 << 14 | 1 << 15 | 1 << 17 | (Steinberg_Vst_Speaker) 1 << 29;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k51_4_1 = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 12 | 1 << 14 | 1 << 15 | 1 << 17 | (Steinberg_Vst_Speaker) 1 << 29 | 1 << 3;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k70_2 = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 9 | 1 << 10 | (Steinberg_Vst_Speaker) 1 << 24 | (Steinberg_Vst_Speaker) 1 << 25;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k71_2 = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 9 | 1 << 10 | (Steinberg_Vst_Speaker) 1 << 24 | (Steinberg_Vst_Speaker) 1 << 25 | 1 << 3;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k91Atmos = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 9 | 1 << 10 | (Steinberg_Vst_Speaker) 1 << 24 | (Steinberg_Vst_Speaker) 1 << 25 | 1 << 3;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k70_3 = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 9 | 1 << 10 | 1 << 12 | 1 << 14 | 1 << 16;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k72_3 = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 9 | 1 << 10 | 1 << 12 | 1 << 14 | 1 << 16 | 1 << 3 | 1 << 18;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k70_4 = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 9 | 1 << 10 | 1 << 12 | 1 << 14 | 1 << 15 | 1 << 17;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k71_4 = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 9 | 1 << 10 | 1 << 12 | 1 << 14 | 1 << 15 | 1 << 17 | 1 << 3;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k111MPEG3D = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 9 | 1 << 10 | 1 << 12 | 1 << 14 | 1 << 15 | 1 << 17 | 1 << 3;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k70_6 = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 9 | 1 << 10 | 1 << 12 | 1 << 14 | 1 << 15 | 1 << 17 | (Steinberg_Vst_Speaker) 1 << 24 | (Steinberg_Vst_Speaker) 1 << 25;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k71_6 = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 9 | 1 << 10 | 1 << 12 | 1 << 14 | 1 << 15 | 1 << 17 | (Steinberg_Vst_Speaker) 1 << 24 | (Steinberg_Vst_Speaker) 1 << 25 | 1 << 3;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k90_4 = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 6 | 1 << 7 | 1 << 9 | 1 << 10 | 1 << 12 | 1 << 14 | 1 << 15 | 1 << 17;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k91_4 = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 6 | 1 << 7 | 1 << 9 | 1 << 10 | 1 << 12 | 1 << 14 | 1 << 15 | 1 << 17 | 1 << 3;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k90_6 = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 6 | 1 << 7 | 1 << 9 | 1 << 10 | 1 << 12 | 1 << 14 | 1 << 15 | 1 << 17 | (Steinberg_Vst_Speaker) 1 << 24 | (Steinberg_Vst_Speaker) 1 << 25;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k91_6 = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 6 | 1 << 7 | 1 << 9 | 1 << 10 | 1 << 12 | 1 << 14 | 1 << 15 | 1 << 17 | (Steinberg_Vst_Speaker) 1 << 24 | (Steinberg_Vst_Speaker) 1 << 25 | 1 << 3;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k100 = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 11 | 1 << 12 | 1 << 14 | 1 << 15 | 1 << 17;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k50_5 = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 11 | 1 << 12 | 1 << 14 | 1 << 15 | 1 << 17;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k101 = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 11 | 1 << 12 | 1 << 14 | 1 << 15 | 1 << 17 | 1 << 3;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k101MPEG3D = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 11 | 1 << 12 | 1 << 14 | 1 << 15 | 1 << 17 | 1 << 3;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k51_5 = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 11 | 1 << 12 | 1 << 14 | 1 << 15 | 1 << 17 | 1 << 3;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k102 = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 3 | 1 << 4 | 1 << 5 | 1 << 12 | 1 << 13 | 1 << 14 | 1 << 15 | 1 << 17 | 1 << 18;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k52_5 = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 3 | 1 << 4 | 1 << 5 | 1 << 12 | 1 << 13 | 1 << 14 | 1 << 15 | 1 << 17 | 1 << 18;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k110 = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 11 | 1 << 12 | 1 << 13 | 1 << 14 | 1 << 15 | 1 << 17;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k50_6 = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 11 | 1 << 12 | 1 << 13 | 1 << 14 | 1 << 15 | 1 << 17;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k111 = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 11 | 1 << 12 | 1 << 13 | 1 << 14 | 1 << 15 | 1 << 17 | 1 << 3;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k51_6 = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 11 | 1 << 12 | 1 << 13 | 1 << 14 | 1 << 15 | 1 << 17 | 1 << 3;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k122 = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 3 | 1 << 4 | 1 << 5 | 1 << 6 | 1 << 7 | 1 << 12 | 1 << 13 | 1 << 14 | 1 << 15 | 1 << 17 | 1 << 18;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k72_5 = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 3 | 1 << 4 | 1 << 5 | 1 << 6 | 1 << 7 | 1 << 12 | 1 << 13 | 1 << 14 | 1 << 15 | 1 << 17 | 1 << 18;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k130 = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 9 | 1 << 10 | 1 << 11 | 1 << 12 | 1 << 13 | 1 << 14 | 1 << 15 | 1 << 17;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k131 = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 9 | 1 << 10 | 1 << 11 | 1 << 12 | 1 << 13 | 1 << 14 | 1 << 15 | 1 << 17 | 1 << 3;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k140 = 1 << 0 | 1 << 1 | 1 << 4 | 1 << 5 | 1 << 9 | 1 << 10 | 1 << 12 | 1 << 14 | 1 << 15 | 1 << 17 | (Steinberg_Vst_Speaker) 1 << 28 | (Steinberg_Vst_Speaker) 1 << 30 | (Steinberg_Vst_Speaker) 1 << 35 | (Steinberg_Vst_Speaker) 1 << 37;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k60_4_4 = 1 << 0 | 1 << 1 | 1 << 4 | 1 << 5 | 1 << 9 | 1 << 10 | 1 << 12 | 1 << 14 | 1 << 15 | 1 << 17 | (Steinberg_Vst_Speaker) 1 << 28 | (Steinberg_Vst_Speaker) 1 << 30 | (Steinberg_Vst_Speaker) 1 << 35 | (Steinberg_Vst_Speaker) 1 << 37;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k220 = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 6 | 1 << 7 | 1 << 8 | 1 << 9 | 1 << 10 | 1 << 11 | 1 << 12 | 1 << 13 | 1 << 14 | 1 << 15 | 1 << 16 | 1 << 17 | (Steinberg_Vst_Speaker) 1 << 24 | (Steinberg_Vst_Speaker) 1 << 25 | (Steinberg_Vst_Speaker) 1 << 28 | (Steinberg_Vst_Speaker) 1 << 29 | (Steinberg_Vst_Speaker) 1 << 30;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k100_9_3 = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 6 | 1 << 7 | 1 << 8 | 1 << 9 | 1 << 10 | 1 << 11 | 1 << 12 | 1 << 13 | 1 << 14 | 1 << 15 | 1 << 16 | 1 << 17 | (Steinberg_Vst_Speaker) 1 << 24 | (Steinberg_Vst_Speaker) 1 << 25 | (Steinberg_Vst_Speaker) 1 << 28 | (Steinberg_Vst_Speaker) 1 << 29 | (Steinberg_Vst_Speaker) 1 << 30;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k222 = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 3 | 1 << 4 | 1 << 5 | 1 << 6 | 1 << 7 | 1 << 8 | 1 << 9 | 1 << 10 | 1 << 11 | 1 << 12 | 1 << 13 | 1 << 14 | 1 << 15 | 1 << 16 | 1 << 17 | 1 << 18 | (Steinberg_Vst_Speaker) 1 << 24 | (Steinberg_Vst_Speaker) 1 << 25 | (Steinberg_Vst_Speaker) 1 << 28 | (Steinberg_Vst_Speaker) 1 << 29 | (Steinberg_Vst_Speaker) 1 << 30;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k102_9_3 = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 3 | 1 << 4 | 1 << 5 | 1 << 6 | 1 << 7 | 1 << 8 | 1 << 9 | 1 << 10 | 1 << 11 | 1 << 12 | 1 << 13 | 1 << 14 | 1 << 15 | 1 << 16 | 1 << 17 | 1 << 18 | (Steinberg_Vst_Speaker) 1 << 24 | (Steinberg_Vst_Speaker) 1 << 25 | (Steinberg_Vst_Speaker) 1 << 28 | (Steinberg_Vst_Speaker) 1 << 29 | (Steinberg_Vst_Speaker) 1 << 30;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k50_5_3 = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 12 | 1 << 13 | 1 << 14 | 1 << 15 | 1 << 17 | (Steinberg_Vst_Speaker) 1 << 28 | (Steinberg_Vst_Speaker) 1 << 29 | (Steinberg_Vst_Speaker) 1 << 30;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k51_5_3 = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 12 | 1 << 13 | 1 << 14 | 1 << 15 | 1 << 17 | (Steinberg_Vst_Speaker) 1 << 28 | (Steinberg_Vst_Speaker) 1 << 29 | (Steinberg_Vst_Speaker) 1 << 30 | 1 << 3;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k50_2_2 = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | (Steinberg_Vst_Speaker) 1 << 24 | (Steinberg_Vst_Speaker) 1 << 25 | (Steinberg_Vst_Speaker) 1 << 28 | (Steinberg_Vst_Speaker) 1 << 30;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k50_4_2 = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 12 | 1 << 14 | 1 << 15 | 1 << 17 | (Steinberg_Vst_Speaker) 1 << 28 | (Steinberg_Vst_Speaker) 1 << 30;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k70_4_2 = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 9 | 1 << 10 | 1 << 12 | 1 << 14 | 1 << 15 | 1 << 17 | (Steinberg_Vst_Speaker) 1 << 28 | (Steinberg_Vst_Speaker) 1 << 30;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k50_5_Sony = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 12 | 1 << 13 | 1 << 14 | 1 << 15 | 1 << 17;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k40_2_2 = 1 << 2 | 1 << 9 | 1 << 10 | 1 << 8 | (Steinberg_Vst_Speaker) 1 << 24 | (Steinberg_Vst_Speaker) 1 << 25 | (Steinberg_Vst_Speaker) 1 << 33 | (Steinberg_Vst_Speaker) 1 << 34;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k40_4_2 = 1 << 0 | 1 << 1 | 1 << 4 | 1 << 5 | 1 << 12 | 1 << 14 | 1 << 15 | 1 << 17 | (Steinberg_Vst_Speaker) 1 << 28 | (Steinberg_Vst_Speaker) 1 << 30;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k50_3_2 = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 12 | 1 << 13 | 1 << 14 | (Steinberg_Vst_Speaker) 1 << 28 | (Steinberg_Vst_Speaker) 1 << 30;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k30_5_2 = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 12 | 1 << 13 | 1 << 14 | 1 << 15 | 1 << 17 | (Steinberg_Vst_Speaker) 1 << 28 | (Steinberg_Vst_Speaker) 1 << 30;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k40_4_4 = 1 << 0 | 1 << 1 | 1 << 4 | 1 << 5 | 1 << 12 | 1 << 14 | 1 << 15 | 1 << 17 | (Steinberg_Vst_Speaker) 1 << 28 | (Steinberg_Vst_Speaker) 1 << 30 | (Steinberg_Vst_Speaker) 1 << 35 | (Steinberg_Vst_Speaker) 1 << 37;
static const Steinberg_Vst_SpeakerArrangement Steinberg_Vst_SpeakerArr_k50_4_4 = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 4 | 1 << 5 | 1 << 12 | 1 << 14 | 1 << 15 | 1 << 17 | (Steinberg_Vst_Speaker) 1 << 28 | (Steinberg_Vst_Speaker) 1 << 30 | (Steinberg_Vst_Speaker) 1 << 35 | (Steinberg_Vst_Speaker) 1 << 37;
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kStringEmpty = "";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kStringMono = "Mono";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kStringStereo = "Stereo";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kStringStereoR = "Stereo (Ls Rs)";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kStringStereoC = "Stereo (Lc Rc)";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kStringStereoSide = "Stereo (Sl Sr)";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kStringStereoCLfe = "Stereo (C LFE)";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kStringStereoTF = "Stereo (Tfl Tfr)";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kStringStereoTS = "Stereo (Tsl Tsr)";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kStringStereoTR = "Stereo (Trl Trr)";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kStringStereoBF = "Stereo (Bfl Bfr)";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kStringCineFront = "Cine Front";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString30Cine = "LRC";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString30Music = "LRS";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString31Cine = "LRC+LFE";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString31Music = "LRS+LFE";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString40Cine = "LRCS";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString40Music = "Quadro";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString41Cine = "LRCS+LFE";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString41Music = "Quadro+LFE";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString50 = "5.0";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString51 = "5.1";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString60Cine = "6.0 Cine";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString60Music = "6.0 Music";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString61Cine = "6.1 Cine";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString61Music = "6.1 Music";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString70Cine = "7.0 SDDS";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString70CineOld = "7.0 Cine (SDDS)";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString70Music = "7.0";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString70MusicOld = "7.0 Music (Dolby)";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString71Cine = "7.1 SDDS";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString71CineOld = "7.1 Cine (SDDS)";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString71Music = "7.1";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString71MusicOld = "7.1 Music (Dolby)";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString71CineTopCenter = "7.1 Cine Top Center";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString71CineCenterHigh = "7.1 Cine Center High";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString71CineFullRear = "7.1 Cine Full Rear";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString51_2 = "5.1.2";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString50_2 = "5.0.2";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString50_2TopSide = "5.0.2 Top Side";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString51_2TopSide = "5.1.2 Top Side";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString71Proximity = "7.1 Proximity";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString80Cine = "8.0 Cine";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString80Music = "8.0 Music";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString40_4 = "8.0 Cube";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString81Cine = "8.1 Cine";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString81Music = "8.1 Music";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString90Cine = "9.0 Cine";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString91Cine = "9.1 Cine";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString100Cine = "10.0 Cine";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString101Cine = "10.1 Cine";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString52_5 = "5.2.5";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString72_5 = "12.2";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString50_4 = "5.0.4";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString51_4 = "5.1.4";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString50_4_1 = "5.0.4.1";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString51_4_1 = "5.1.4.1";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString70_2 = "7.0.2";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString71_2 = "7.1.2";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString70_3 = "7.0.3";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString72_3 = "7.2.3";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString70_4 = "7.0.4";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString71_4 = "7.1.4";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString70_6 = "7.0.6";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString71_6 = "7.1.6";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString90_4 = "9.0.4";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString91_4 = "9.1.4";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString90_6 = "9.0.6";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString91_6 = "9.1.6";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString50_5 = "10.0 Auro-3D";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString51_5 = "10.1 Auro-3D";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString50_6 = "11.0 Auro-3D";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString51_6 = "11.1 Auro-3D";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString130 = "13.0 Auro-3D";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString131 = "13.1 Auro-3D";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString41_4_1 = "8.1 MPEG";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString60_4_4 = "14.0";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString220 = "22.0";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString222 = "22.2";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString50_5_3 = "5.0.5.3";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString51_5_3 = "5.1.5.3";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString50_2_2 = "5.0.2.2";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString50_4_2 = "5.0.4.2";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString70_4_2 = "7.0.4.2";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString50_5_Sony = "5.0.5 Sony";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString40_2_2 = "4.0.3.2";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString40_4_2 = "4.0.4.2";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString50_3_2 = "5.0.3.2";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString30_5_2 = "3.0.5.2";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString40_4_4 = "4.0.4.4";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString50_4_4 = "5.0.4.4";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kStringAmbi1stOrder = "1st Order Ambisonics";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kStringAmbi2cdOrder = "2nd Order Ambisonics";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kStringAmbi3rdOrder = "3rd Order Ambisonics";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kStringAmbi4thOrder = "4th Order Ambisonics";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kStringAmbi5thOrder = "5th Order Ambisonics";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kStringAmbi6thOrder = "6th Order Ambisonics";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kStringAmbi7thOrder = "7th Order Ambisonics";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kStringMonoS = "M";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kStringStereoS = "L R";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kStringStereoRS = "Ls Rs";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kStringStereoCS = "Lc Rc";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kStringStereoSS = "Sl Sr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kStringStereoCLfeS = "C LFE";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kStringStereoTFS = "Tfl Tfr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kStringStereoTSS = "Tsl Tsr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kStringStereoTRS = "Trl Trr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kStringStereoBFS = "Bfl Bfr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kStringCineFrontS = "L R C Lc Rc";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString30CineS = "L R C";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString30MusicS = "L R S";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString31CineS = "L R C LFE";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString31MusicS = "L R LFE S";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString40CineS = "L R C S";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString40MusicS = "L R Ls Rs";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString41CineS = "L R C LFE S";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString41MusicS = "L R LFE Ls Rs";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString50S = "L R C Ls Rs";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString51S = "L R C LFE Ls Rs";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString60CineS = "L R C Ls Rs Cs";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString60MusicS = "L R Ls Rs Sl Sr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString61CineS = "L R C LFE Ls Rs Cs";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString61MusicS = "L R LFE Ls Rs Sl Sr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString70CineS = "L R C Ls Rs Lc Rc";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString70MusicS = "L R C Ls Rs Sl Sr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString71CineS = "L R C LFE Ls Rs Lc Rc";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString71MusicS = "L R C LFE Ls Rs Sl Sr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString80CineS = "L R C Ls Rs Lc Rc Cs";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString80MusicS = "L R C Ls Rs Cs Sl Sr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString81CineS = "L R C LFE Ls Rs Lc Rc Cs";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString81MusicS = "L R C LFE Ls Rs Cs Sl Sr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString40_4S = "L R Ls Rs Tfl Tfr Trl Trr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString71CineTopCenterS = "L R C LFE Ls Rs Cs Tc";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString71CineCenterHighS = "L R C LFE Ls Rs Cs Tfc";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString71CineFullRearS = "L R C LFE Ls Rs Lcs Rcs";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString50_2S = "L R C Ls Rs Tfl Tfr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString51_2S = "L R C LFE Ls Rs Tfl Tfr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString50_2TopSideS = "L R C Ls Rs Tsl Tsr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString51_2TopSideS = "L R C LFE Ls Rs Tsl Tsr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString71ProximityS = "L R C LFE Ls Rs Pl Pr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString90CineS = "L R C Ls Rs Lc Rc Sl Sr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString91CineS = "L R C LFE Ls Rs Lc Rc Sl Sr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString100CineS = "L R C Ls Rs Lc Rc Cs Sl Sr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString101CineS = "L R C LFE Ls Rs Lc Rc Cs Sl Sr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString50_4S = "L R C Ls Rs Tfl Tfr Trl Trr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString51_4S = "L R C LFE Ls Rs Tfl Tfr Trl Trr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString50_4_1S = "L R C Ls Rs Tfl Tfr Trl Trr Bfc";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString51_4_1S = "L R C LFE Ls Rs Tfl Tfr Trl Trr Bfc";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString70_2S = "L R C Ls Rs Sl Sr Tsl Tsr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString71_2S = "L R C LFE Ls Rs Sl Sr Tsl Tsr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString70_3S = "L R C Ls Rs Sl Sr Tfl Tfr Trc";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString72_3S = "L R C LFE Ls Rs Sl Sr Tfl Tfr Trc LFE2";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString70_4S = "L R C Ls Rs Sl Sr Tfl Tfr Trl Trr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString71_4S = "L R C LFE Ls Rs Sl Sr Tfl Tfr Trl Trr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString70_6S = "L R C Ls Rs Sl Sr Tfl Tfr Trl Trr Tsl Tsr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString71_6S = "L R C LFE Ls Rs Sl Sr Tfl Tfr Trl Trr Tsl Tsr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString90_4S = "L R C Ls Rs Lc Rc Sl Sr Tfl Tfr Trl Trr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString91_4S = "L R C LFE Ls Rs Lc Rc Sl Sr Tfl Tfr Trl Trr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString90_6S = "L R C Ls Rs Lc Rc Sl Sr Tfl Tfr Trl Trr Tsl Tsr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString91_6S = "L R C LFE Ls Rs Lc Rc Sl Sr Tfl Tfr Trl Trr Tsl Tsr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString50_5S = "L R C Ls Rs Tc Tfl Tfr Trl Trr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString51_5S = "L R C LFE Ls Rs Tc Tfl Tfr Trl Trr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString50_5_SonyS = "L R C Ls Rs Tfl Tfc Tfr Trl Trr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString50_6S = "L R C Ls Rs Tc Tfl Tfc Tfr Trl Trr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString51_6S = "L R C LFE Ls Rs Tc Tfl Tfc Tfr Trl Trr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString130S = "L R C Ls Rs Sl Sr Tc Tfl Tfc Tfr Trl Trr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString131S = "L R C LFE Ls Rs Sl Sr Tc Tfl Tfc Tfr Trl Trr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString52_5S = "L R C LFE Ls Rs Tfl Tfc Tfr Trl Trr LFE2";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString72_5S = "L R C LFE Ls Rs Lc Rc Tfl Tfc Tfr Trl Trr LFE2";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString41_4_1S = "L R LFE Ls Rs Tfl Tfc Tfr Bfc";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString30_5_2S = "L R C Tfl Tfc Tfr Trl Trr Bfl Bfr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString40_2_2S = "C Sl Sr Cs Tfc Tsl Tsr Trc";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString40_4_2S = "L R Ls Rs Tfl Tfr Trl Trr Bfl Bfr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString40_4_4S = "L R Ls Rs Tfl Tfr Trl Trr Bfl Bfr Brl Brr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString50_4_4S = "L R C Ls Rs Tfl Tfr Trl Trr Bfl Bfr Brl Brr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString60_4_4S = "L R Ls Rs Sl Sr Tfl Tfr Trl Trr Bfl Bfr Brl Brr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString50_5_3S = "L R C Ls Rs Tfl Tfc Tfr Trl Trr Bfl Bfc Bfr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString51_5_3S = "L R C LFE Ls Rs Tfl Tfc Tfr Trl Trr Bfl Bfc Bfr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString50_2_2S = "L R C Ls Rs Tsl Tsr Bfl Bfr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString50_3_2S = "L R C Ls Rs Tfl Tfc Tfr Bfl Bfr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString50_4_2S = "L R C Ls Rs Tfl Tfr Trl Trr Bfl Bfr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString70_4_2S = "L R C Ls Rs Sl Sr Tfl Tfr Trl Trr Bfl Bfr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString222S = "L R C LFE Ls Rs Lc Rc Cs Sl Sr Tc Tfl Tfc Tfr Trl Trc Trr LFE2 Tsl Tsr Bfl Bfc Bfr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kString220S = "L R C Ls Rs Lc Rc Cs Sl Sr Tc Tfl Tfc Tfr Trl Trc Trr Tsl Tsr Bfl Bfc Bfr";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kStringAmbi1stOrderS = "0 1 2 3";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kStringAmbi2cdOrderS = "0 1 2 3 4 5 6 7 8";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kStringAmbi3rdOrderS = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kStringAmbi4thOrderS = "0..24";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kStringAmbi5thOrderS = "0..35";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kStringAmbi6thOrderS = "0..48";
static const Steinberg_Vst_CString Steinberg_Vst_SpeakerArr_kStringAmbi7thOrderS = "0..63";
static const Steinberg_Vst_CString Steinberg_Vst_CurveType_kSegment = "segment";
static const Steinberg_Vst_CString Steinberg_Vst_CurveType_kValueList = "valueList";
static const Steinberg_Vst_CString Steinberg_Vst_Attributes_kStyle = "style";
static const Steinberg_Vst_CString Steinberg_Vst_Attributes_kLEDStyle = "ledStyle";
static const Steinberg_Vst_CString Steinberg_Vst_Attributes_kSwitchStyle = "switchStyle";
static const Steinberg_Vst_CString Steinberg_Vst_Attributes_kKnobTurnsPerFullRange = "turnsPerFullRange";
static const Steinberg_Vst_CString Steinberg_Vst_Attributes_kFunction = "function";
static const Steinberg_Vst_CString Steinberg_Vst_Attributes_kFlags = "flags";
static const Steinberg_Vst_CString Steinberg_Vst_AttributesFunction_kPanPosCenterXFunc = "PanPosCenterX";
static const Steinberg_Vst_CString Steinberg_Vst_AttributesFunction_kPanPosCenterYFunc = "PanPosCenterY";
static const Steinberg_Vst_CString Steinberg_Vst_AttributesFunction_kPanPosFrontLeftXFunc = "PanPosFrontLeftX";
static const Steinberg_Vst_CString Steinberg_Vst_AttributesFunction_kPanPosFrontLeftYFunc = "PanPosFrontLeftY";
static const Steinberg_Vst_CString Steinberg_Vst_AttributesFunction_kPanPosFrontRightXFunc = "PanPosFrontRightX";
static const Steinberg_Vst_CString Steinberg_Vst_AttributesFunction_kPanPosFrontRightYFunc = "PanPosFrontRightY";
static const Steinberg_Vst_CString Steinberg_Vst_AttributesFunction_kPanRotationFunc = "PanRotation";
static const Steinberg_Vst_CString Steinberg_Vst_AttributesFunction_kPanLawFunc = "PanLaw";
static const Steinberg_Vst_CString Steinberg_Vst_AttributesFunction_kPanMirrorModeFunc = "PanMirrorMode";
static const Steinberg_Vst_CString Steinberg_Vst_AttributesFunction_kPanLfeGainFunc = "PanLfeGain";
static const Steinberg_Vst_CString Steinberg_Vst_AttributesFunction_kGainReductionFunc = "GainReduction";
static const Steinberg_Vst_CString Steinberg_Vst_AttributesFunction_kSoloFunc = "Solo";
static const Steinberg_Vst_CString Steinberg_Vst_AttributesFunction_kMuteFunc = "Mute";
static const Steinberg_Vst_CString Steinberg_Vst_AttributesFunction_kVolumeFunc = "Volume";
static const Steinberg_Vst_CString Steinberg_Vst_AttributesStyle_kInverseStyle = "inverse";
static const Steinberg_Vst_CString Steinberg_Vst_AttributesStyle_kLEDWrapLeftStyle = "wrapLeft";
static const Steinberg_Vst_CString Steinberg_Vst_AttributesStyle_kLEDWrapRightStyle = "wrapRight";
static const Steinberg_Vst_CString Steinberg_Vst_AttributesStyle_kLEDSpreadStyle = "spread";
static const Steinberg_Vst_CString Steinberg_Vst_AttributesStyle_kLEDBoostCutStyle = "boostCut";
static const Steinberg_Vst_CString Steinberg_Vst_AttributesStyle_kLEDSingleDotStyle = "singleDot";
static const Steinberg_Vst_CString Steinberg_Vst_AttributesStyle_kSwitchPushStyle = "push";
static const Steinberg_Vst_CString Steinberg_Vst_AttributesStyle_kSwitchPushIncLoopedStyle = "pushIncLooped";
static const Steinberg_Vst_CString Steinberg_Vst_AttributesStyle_kSwitchPushDecLoopedStyle = "pushDecLooped";
static const Steinberg_Vst_CString Steinberg_Vst_AttributesStyle_kSwitchPushIncStyle = "pushInc";
static const Steinberg_Vst_CString Steinberg_Vst_AttributesStyle_kSwitchPushDecStyle = "pushDec";
static const Steinberg_Vst_CString Steinberg_Vst_AttributesStyle_kSwitchLatchStyle = "latch";
static const Steinberg_Vst_CString Steinberg_Vst_AttributesFlags_kHideableFlag = "hideable";
static const Steinberg_Vst_CString Steinberg_Vst_ChannelContext_kChannelUIDKey = "channel uid";
static const Steinberg_Vst_CString Steinberg_Vst_ChannelContext_kChannelUIDLengthKey = "channel uid length";
static const Steinberg_Vst_CString Steinberg_Vst_ChannelContext_kChannelNameKey = "channel name";
static const Steinberg_Vst_CString Steinberg_Vst_ChannelContext_kChannelNameLengthKey = "channel name length";
static const Steinberg_Vst_CString Steinberg_Vst_ChannelContext_kChannelColorKey = "channel color";
static const Steinberg_Vst_CString Steinberg_Vst_ChannelContext_kChannelIndexKey = "channel index";
static const Steinberg_Vst_CString Steinberg_Vst_ChannelContext_kChannelIndexNamespaceOrderKey = "channel index namespace order";
static const Steinberg_Vst_CString Steinberg_Vst_ChannelContext_kChannelIndexNamespaceKey = "channel index namespace";
static const Steinberg_Vst_CString Steinberg_Vst_ChannelContext_kChannelIndexNamespaceLengthKey = "channel index namespace length";
static const Steinberg_Vst_CString Steinberg_Vst_ChannelContext_kChannelImageKey = "channel image";
static const Steinberg_Vst_CString Steinberg_Vst_ChannelContext_kChannelPluginLocationKey = "channel plugin location";
static const Steinberg_Vst_CString Steinberg_Vst_PlugType_kFx = "Fx";
static const Steinberg_Vst_CString Steinberg_Vst_PlugType_kFxAnalyzer = "Fx|Analyzer";
static const Steinberg_Vst_CString Steinberg_Vst_PlugType_kFxDelay = "Fx|Delay";
static const Steinberg_Vst_CString Steinberg_Vst_PlugType_kFxDistortion = "Fx|Distortion";
static const Steinberg_Vst_CString Steinberg_Vst_PlugType_kFxDynamics = "Fx|Dynamics";
static const Steinberg_Vst_CString Steinberg_Vst_PlugType_kFxEQ = "Fx|EQ";
static const Steinberg_Vst_CString Steinberg_Vst_PlugType_kFxFilter = "Fx|Filter";
static const Steinberg_Vst_CString Steinberg_Vst_PlugType_kFxGenerator = "Fx|Generator";
static const Steinberg_Vst_CString Steinberg_Vst_PlugType_kFxInstrument = "Fx|Instrument";
static const Steinberg_Vst_CString Steinberg_Vst_PlugType_kFxInstrumentExternal = "Fx|Instrument|External";
static const Steinberg_Vst_CString Steinberg_Vst_PlugType_kFxMastering = "Fx|Mastering";
static const Steinberg_Vst_CString Steinberg_Vst_PlugType_kFxModulation = "Fx|Modulation";
static const Steinberg_Vst_CString Steinberg_Vst_PlugType_kFxNetwork = "Fx|Network";
static const Steinberg_Vst_CString Steinberg_Vst_PlugType_kFxPitchShift = "Fx|Pitch Shift";
static const Steinberg_Vst_CString Steinberg_Vst_PlugType_kFxRestoration = "Fx|Restoration";
static const Steinberg_Vst_CString Steinberg_Vst_PlugType_kFxReverb = "Fx|Reverb";
static const Steinberg_Vst_CString Steinberg_Vst_PlugType_kFxSpatial = "Fx|Spatial";
static const Steinberg_Vst_CString Steinberg_Vst_PlugType_kFxSurround = "Fx|Surround";
static const Steinberg_Vst_CString Steinberg_Vst_PlugType_kFxTools = "Fx|Tools";
static const Steinberg_Vst_CString Steinberg_Vst_PlugType_kFxVocals = "Fx|Vocals";
static const Steinberg_Vst_CString Steinberg_Vst_PlugType_kInstrument = "Instrument";
static const Steinberg_Vst_CString Steinberg_Vst_PlugType_kInstrumentDrum = "Instrument|Drum";
static const Steinberg_Vst_CString Steinberg_Vst_PlugType_kInstrumentExternal = "Instrument|External";
static const Steinberg_Vst_CString Steinberg_Vst_PlugType_kInstrumentPiano = "Instrument|Piano";
static const Steinberg_Vst_CString Steinberg_Vst_PlugType_kInstrumentSampler = "Instrument|Sampler";
static const Steinberg_Vst_CString Steinberg_Vst_PlugType_kInstrumentSynth = "Instrument|Synth";
static const Steinberg_Vst_CString Steinberg_Vst_PlugType_kInstrumentSynthSampler = "Instrument|Synth|Sampler";
static const Steinberg_Vst_CString Steinberg_Vst_PlugType_kAmbisonics = "Ambisonics";
static const Steinberg_Vst_CString Steinberg_Vst_PlugType_kAnalyzer = "Analyzer";
static const Steinberg_Vst_CString Steinberg_Vst_PlugType_kNoOfflineProcess = "NoOfflineProcess";
static const Steinberg_Vst_CString Steinberg_Vst_PlugType_kOnlyARA = "OnlyARA";
static const Steinberg_Vst_CString Steinberg_Vst_PlugType_kOnlyOfflineProcess = "OnlyOfflineProcess";
static const Steinberg_Vst_CString Steinberg_Vst_PlugType_kOnlyRealTime = "OnlyRT";
static const Steinberg_Vst_CString Steinberg_Vst_PlugType_kSpatial = "Spatial";
static const Steinberg_Vst_CString Steinberg_Vst_PlugType_kSpatialFx = "Spatial|Fx";
static const Steinberg_Vst_CString Steinberg_Vst_PlugType_kUpDownMix = "Up-Downmix";
static const Steinberg_Vst_CString Steinberg_Vst_PlugType_kMono = "Mono";
static const Steinberg_Vst_CString Steinberg_Vst_PlugType_kStereo = "Stereo";
static const Steinberg_Vst_CString Steinberg_Vst_PlugType_kSurround = "Surround";
static const Steinberg_uint32 Steinberg_Vst_kNoTail = 0;
static const Steinberg_uint32 Steinberg_Vst_kInfiniteTail = UINT32_MAX;
static const Steinberg_Vst_UnitID Steinberg_Vst_kRootUnitId = 0;
static const Steinberg_Vst_UnitID Steinberg_Vst_kNoParentUnitId = -1;
static const Steinberg_Vst_ProgramListID Steinberg_Vst_kNoProgramListId = -1;
static const Steinberg_int32 Steinberg_Vst_kAllProgramInvalid = -1;
static const Steinberg_Vst_CString Steinberg_Vst_FunctionNameType_kCompGainReduction = "Comp:GainReduction";
static const Steinberg_Vst_CString Steinberg_Vst_FunctionNameType_kCompGainReductionMax = "Comp:GainReductionMax";
static const Steinberg_Vst_CString Steinberg_Vst_FunctionNameType_kCompGainReductionPeakHold = "Comp:GainReductionPeakHold";
static const Steinberg_Vst_CString Steinberg_Vst_FunctionNameType_kCompResetGainReductionMax = "Comp:ResetGainReductionMax";
static const Steinberg_Vst_CString Steinberg_Vst_FunctionNameType_kLowLatencyMode = "LowLatencyMode";
static const Steinberg_Vst_CString Steinberg_Vst_FunctionNameType_kDryWetMix = "DryWetMix";
static const Steinberg_Vst_CString Steinberg_Vst_FunctionNameType_kRandomize = "Randomize";
static const Steinberg_Vst_CString Steinberg_Vst_FunctionNameType_kPanPosCenterX = "PanPosCenterX";
static const Steinberg_Vst_CString Steinberg_Vst_FunctionNameType_kPanPosCenterY = "PanPosCenterY";
static const Steinberg_Vst_CString Steinberg_Vst_FunctionNameType_kPanPosCenterZ = "PanPosCenterZ";


/*----------------------------------------------------------------------------------------------------------------------
----- Structs ----------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/gui/iplugview.h", line 34 */

struct Steinberg_ViewRect
{
    Steinberg_int32 left;
    Steinberg_int32 top;
    Steinberg_int32 right;
    Steinberg_int32 bottom;
};

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstnoteexpression.h", line 72 */

struct Steinberg_Vst_NoteExpressionValueDescription
{
    Steinberg_Vst_NoteExpressionValue defaultValue;
    Steinberg_Vst_NoteExpressionValue minimum;
    Steinberg_Vst_NoteExpressionValue maximum;
    Steinberg_int32 stepCount;
};

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstnoteexpression.h", line 92 */

struct Steinberg_Vst_NoteExpressionValueEvent
{
    Steinberg_Vst_NoteExpressionTypeID typeId;
    Steinberg_int32 noteId;
    Steinberg_Vst_NoteExpressionValue value;
};

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstnoteexpression.h", line 106 */

struct Steinberg_Vst_NoteExpressionTextEvent
{
    Steinberg_Vst_NoteExpressionTypeID typeId;
    Steinberg_int32 noteId;
    Steinberg_uint32 textLen;
    const Steinberg_Vst_TChar* text;
};

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstnoteexpression.h", line 126 */

struct Steinberg_Vst_NoteExpressionTypeInfo
{
    Steinberg_Vst_NoteExpressionTypeID typeId;
    Steinberg_Vst_String128 title;
    Steinberg_Vst_String128 shortTitle;
    Steinberg_Vst_String128 units;
    Steinberg_int32 unitId;
    struct Steinberg_Vst_NoteExpressionValueDescription valueDesc;
    Steinberg_Vst_ParamID associatedParameterId;
    Steinberg_int32 flags;
};

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstnoteexpression.h", line 206 */

struct Steinberg_Vst_KeyswitchInfo
{
    Steinberg_Vst_KeyswitchTypeID typeId;
    Steinberg_Vst_String128 title;
    Steinberg_Vst_String128 shortTitle;
    Steinberg_int32 keyswitchMin;
    Steinberg_int32 keyswitchMax;
    Steinberg_int32 keyRemapped;
    Steinberg_int32 unitId;
    Steinberg_int32 flags;
};

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstphysicalui.h", line 61 */

struct Steinberg_Vst_PhysicalUIMap
{
    Steinberg_Vst_PhysicalUITypeID physicalUITypeID;
    Steinberg_Vst_NoteExpressionTypeID noteExpressionTypeID;
};

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstphysicalui.h", line 77 */

struct Steinberg_Vst_PhysicalUIMapList
{
    Steinberg_uint32 count;
    struct Steinberg_Vst_PhysicalUIMap* map;
};

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/base/ipluginbase.h", line 62 */

struct Steinberg_PFactoryInfo
{
    Steinberg_char8 vendor[64];
    Steinberg_char8 url[256];
    Steinberg_char8 email[128];
    Steinberg_int32 flags;
};

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/base/ipluginbase.h", line 124 */

struct Steinberg_PClassInfo
{
    Steinberg_TUID cid;
    Steinberg_int32 cardinality;
    Steinberg_char8 category[32];
    Steinberg_char8 name[64];
};

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/base/ipluginbase.h", line 221 */

struct Steinberg_PClassInfo2
{
    Steinberg_TUID cid;
    Steinberg_int32 cardinality;
    Steinberg_char8 category[32];
    Steinberg_char8 name[64];
    Steinberg_uint32 classFlags;
    Steinberg_char8 subCategories[128];
    Steinberg_char8 vendor[64];
    Steinberg_char8 version[64];
    Steinberg_char8 sdkVersion[64];
};

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/base/ipluginbase.h", line 336 */

struct Steinberg_PClassInfoW
{
    Steinberg_TUID cid;
    Steinberg_int32 cardinality;
    Steinberg_char8 category[32];
    Steinberg_char16 name[64];
    Steinberg_uint32 classFlags;
    Steinberg_char8 subCategories[128];
    Steinberg_char16 vendor[64];
    Steinberg_char16 version[64];
    Steinberg_char16 sdkVersion[64];
};

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstcomponent.h", line 92 */

struct Steinberg_Vst_BusInfo
{
    Steinberg_Vst_MediaType mediaType;
    Steinberg_Vst_BusDirection direction;
    Steinberg_int32 channelCount;
    Steinberg_Vst_String128 name;
    Steinberg_Vst_BusType busType;
    Steinberg_uint32 flags;
};

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstcomponent.h", line 135 */

struct Steinberg_Vst_RoutingInfo
{
    Steinberg_Vst_MediaType mediaType;
    Steinberg_int32 busIndex;
    Steinberg_int32 channel;
};

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivsteditcontroller.h", line 46 */

struct Steinberg_Vst_ParameterInfo
{
    Steinberg_Vst_ParamID id;
    Steinberg_Vst_String128 title;
    Steinberg_Vst_String128 shortTitle;
    Steinberg_Vst_String128 units;
    Steinberg_int32 stepCount;
    Steinberg_Vst_ParamValue defaultNormalizedValue;
    Steinberg_Vst_UnitID unitId;
    Steinberg_int32 flags;
};

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstprocesscontext.h", line 44 */

struct Steinberg_Vst_FrameRate
{
    Steinberg_uint32 framesPerSecond;
    Steinberg_uint32 flags;
};

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstprocesscontext.h", line 64 */

struct Steinberg_Vst_Chord
{
    Steinberg_uint8 keyNote;
    Steinberg_uint8 rootNote;
    Steinberg_int16 chordMask;
};

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstprocesscontext.h", line 96 */

struct Steinberg_Vst_ProcessContext
{
    Steinberg_uint32 state;
    double sampleRate;
    Steinberg_Vst_TSamples projectTimeSamples;
    Steinberg_int64 systemTime;
    Steinberg_Vst_TSamples continousTimeSamples;
    Steinberg_Vst_TQuarterNotes projectTimeMusic;
    Steinberg_Vst_TQuarterNotes barPositionMusic;
    Steinberg_Vst_TQuarterNotes cycleStartMusic;
    Steinberg_Vst_TQuarterNotes cycleEndMusic;
    double tempo;
    Steinberg_int32 timeSigNumerator;
    Steinberg_int32 timeSigDenominator;
    struct Steinberg_Vst_Chord chord;
    Steinberg_int32 smpteOffsetSubframes;
    struct Steinberg_Vst_FrameRate frameRate;
    Steinberg_int32 samplesToNextClock;
};

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstevents.h", line 43 */

struct Steinberg_Vst_NoteOnEvent
{
    Steinberg_int16 channel;
    Steinberg_int16 pitch;
    float tuning;
    float velocity;
    Steinberg_int32 length;
    Steinberg_int32 noteId;
};

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstevents.h", line 57 */

struct Steinberg_Vst_NoteOffEvent
{
    Steinberg_int16 channel;
    Steinberg_int16 pitch;
    float velocity;
    Steinberg_int32 noteId;
    float tuning;
};

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstevents.h", line 70 */

struct Steinberg_Vst_DataEvent
{
    Steinberg_uint32 size;
    Steinberg_uint32 type;
    const Steinberg_uint8* bytes;
};

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstevents.h", line 87 */

struct Steinberg_Vst_PolyPressureEvent
{
    Steinberg_int16 channel;
    Steinberg_int16 pitch;
    float pressure;
    Steinberg_int32 noteId;
};

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstevents.h", line 99 */

struct Steinberg_Vst_ChordEvent
{
    Steinberg_int16 root;
    Steinberg_int16 bassNote;
    Steinberg_int16 mask;
    Steinberg_uint16 textLen;
    const Steinberg_Vst_TChar* text;
};

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstevents.h", line 113 */

struct Steinberg_Vst_ScaleEvent
{
    Steinberg_int16 root;
    Steinberg_int16 mask;
    Steinberg_uint16 textLen;
    const Steinberg_Vst_TChar* text;
};

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstevents.h", line 129 */

struct Steinberg_Vst_LegacyMIDICCOutEvent
{
    Steinberg_uint8 controlNumber;
    Steinberg_int8 channel;
    Steinberg_int8 value;
    Steinberg_int8 value2;
};

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstevents.h", line 142 */

struct Steinberg_Vst_Event
{
    Steinberg_int32 busIndex;
    Steinberg_int32 sampleOffset;
    Steinberg_Vst_TQuarterNotes ppqPosition;
    Steinberg_uint16 flags;
    Steinberg_uint16 type;
    union
    {
        struct Steinberg_Vst_NoteOnEvent Steinberg_Vst_Event_noteOn;
        struct Steinberg_Vst_NoteOffEvent Steinberg_Vst_Event_noteOff;
        struct Steinberg_Vst_DataEvent Steinberg_Vst_Event_data;
        struct Steinberg_Vst_PolyPressureEvent Steinberg_Vst_Event_polyPressure;
        struct Steinberg_Vst_NoteExpressionValueEvent Steinberg_Vst_Event_noteExpressionValue;
        struct Steinberg_Vst_NoteExpressionTextEvent Steinberg_Vst_Event_noteExpressionText;
        struct Steinberg_Vst_ChordEvent Steinberg_Vst_Event_chord;
        struct Steinberg_Vst_ScaleEvent Steinberg_Vst_Event_scale;
        struct Steinberg_Vst_LegacyMIDICCOutEvent Steinberg_Vst_Event_midiCCOut;
    };
};

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstrepresentation.h", line 37 */

struct Steinberg_Vst_RepresentationInfo
{
    Steinberg_char8 vendor[64];
    Steinberg_char8 name[64];
    Steinberg_char8 version[64];
    Steinberg_char8 host[64];
};

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstcontextmenu.h", line 159 */

struct Steinberg_Vst_IContextMenuItem
{
    Steinberg_Vst_String128 name;
    Steinberg_int32 tag;
    Steinberg_int32 flags;
};

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstaudioprocessor.h", line 165 */

struct Steinberg_Vst_ProcessSetup
{
    Steinberg_int32 processMode;
    Steinberg_int32 symbolicSampleSize;
    Steinberg_int32 maxSamplesPerBlock;
    Steinberg_Vst_SampleRate sampleRate;
};

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstaudioprocessor.h", line 191 */

struct Steinberg_Vst_AudioBusBuffers
{
    Steinberg_int32 numChannels;
    Steinberg_uint64 silenceFlags;
    union
    {
        Steinberg_Vst_Sample32** Steinberg_Vst_AudioBusBuffers_channelBuffers32;
        Steinberg_Vst_Sample64** Steinberg_Vst_AudioBusBuffers_channelBuffers64;
    };
};

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstaudioprocessor.h", line 213 */

struct Steinberg_Vst_ProcessData
{
    Steinberg_int32 processMode;
    Steinberg_int32 symbolicSampleSize;
    Steinberg_int32 numSamples;
    Steinberg_int32 numInputs;
    Steinberg_int32 numOutputs;
    struct Steinberg_Vst_AudioBusBuffers* inputs;
    struct Steinberg_Vst_AudioBusBuffers* outputs;
    struct Steinberg_Vst_IParameterChanges* inputParameterChanges;
    struct Steinberg_Vst_IParameterChanges* outputParameterChanges;
    struct Steinberg_Vst_IEventList* inputEvents;
    struct Steinberg_Vst_IEventList* outputEvents;
    struct Steinberg_Vst_ProcessContext* processContext;
};

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstunits.h", line 44 */

struct Steinberg_Vst_UnitInfo
{
    Steinberg_Vst_UnitID id;
    Steinberg_Vst_UnitID parentUnitId;
    Steinberg_Vst_String128 name;
    Steinberg_Vst_ProgramListID programListId;
};

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstunits.h", line 56 */

struct Steinberg_Vst_ProgramListInfo
{
    Steinberg_Vst_ProgramListID id;
    Steinberg_Vst_String128 name;
    Steinberg_int32 programCount;
};


/*----------------------------------------------------------------------------------------------------------------------
----- Interfaces -------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/base/funknown.h", line 374 */

typedef struct Steinberg_FUnknownVtbl
{
    /* methods defined in "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

} Steinberg_FUnknownVtbl;

typedef struct Steinberg_FUnknown
{
    struct Steinberg_FUnknownVtbl* lpVtbl;
} Steinberg_FUnknown;

static const Steinberg_TUID Steinberg_FUnknown_iid = SMTG_INLINE_UID (0x00000000, 0x00000000, 0xC0000000, 0x00000046);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/gui/iplugviewcontentscalesupport.h", line 57 */

typedef struct Steinberg_IPlugViewContentScaleSupportVtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods defined in "Steinberg_IPlugViewContentScaleSupport": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* setContentScaleFactor) (void* thisInterface, Steinberg_IPlugViewContentScaleSupport_ScaleFactor factor);

} Steinberg_IPlugViewContentScaleSupportVtbl;

typedef struct Steinberg_IPlugViewContentScaleSupport
{
    struct Steinberg_IPlugViewContentScaleSupportVtbl* lpVtbl;
} Steinberg_IPlugViewContentScaleSupport;

static const Steinberg_TUID Steinberg_IPlugViewContentScaleSupport_iid = SMTG_INLINE_UID (0x65ED9690, 0x8AC44525, 0x8AADEF7A, 0x72EA703F);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/gui/iplugview.h", line 122 */

typedef struct Steinberg_IPlugViewVtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods defined in "Steinberg_IPlugView": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* isPlatformTypeSupported) (void* thisInterface, Steinberg_FIDString type);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* attached) (void* thisInterface, void* parent, Steinberg_FIDString type);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* removed) (void* thisInterface);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* onWheel) (void* thisInterface, float distance);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* onKeyDown) (void* thisInterface, Steinberg_char16 key, Steinberg_int16 keyCode, Steinberg_int16 modifiers);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* onKeyUp) (void* thisInterface, Steinberg_char16 key, Steinberg_int16 keyCode, Steinberg_int16 modifiers);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* getSize) (void* thisInterface, struct Steinberg_ViewRect* size);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* onSize) (void* thisInterface, struct Steinberg_ViewRect* newSize);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* onFocus) (void* thisInterface, Steinberg_TBool state);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* setFrame) (void* thisInterface, struct Steinberg_IPlugFrame* frame);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* canResize) (void* thisInterface);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* checkSizeConstraint) (void* thisInterface, struct Steinberg_ViewRect* rect);

} Steinberg_IPlugViewVtbl;

typedef struct Steinberg_IPlugView
{
    struct Steinberg_IPlugViewVtbl* lpVtbl;
} Steinberg_IPlugView;

static const Steinberg_TUID Steinberg_IPlugView_iid = SMTG_INLINE_UID (0x5BC32507, 0xD06049EA, 0xA6151B52, 0x2B755B29);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/gui/iplugview.h", line 196 */

typedef struct Steinberg_IPlugFrameVtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods defined in "Steinberg_IPlugFrame": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* resizeView) (void* thisInterface, struct Steinberg_IPlugView* view, struct Steinberg_ViewRect* newSize);

} Steinberg_IPlugFrameVtbl;

typedef struct Steinberg_IPlugFrame
{
    struct Steinberg_IPlugFrameVtbl* lpVtbl;
} Steinberg_IPlugFrame;

static const Steinberg_TUID Steinberg_IPlugFrame_iid = SMTG_INLINE_UID (0x367FAF01, 0xAFA94693, 0x8D4DA2A0, 0xED0882A3);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/base/ibstream.h", line 29 */

typedef struct Steinberg_IBStreamVtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods defined in "Steinberg_IBStream": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* read) (void* thisInterface, void* buffer, Steinberg_int32 numBytes, Steinberg_int32* numBytesRead);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* write) (void* thisInterface, void* buffer, Steinberg_int32 numBytes, Steinberg_int32* numBytesWritten);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* seek) (void* thisInterface, Steinberg_int64 pos, Steinberg_int32 mode, Steinberg_int64* result);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* tell) (void* thisInterface, Steinberg_int64* pos);

} Steinberg_IBStreamVtbl;

typedef struct Steinberg_IBStream
{
    struct Steinberg_IBStreamVtbl* lpVtbl;
} Steinberg_IBStream;

static const Steinberg_TUID Steinberg_IBStream_iid = SMTG_INLINE_UID (0xC3BF6EA2, 0x30994752, 0x9B6BF990, 0x1EE33E9B);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/base/ibstream.h", line 72 */

typedef struct Steinberg_ISizeableStreamVtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods defined in "Steinberg_ISizeableStream": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* getStreamSize) (void* thisInterface, Steinberg_int64* size);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* setStreamSize) (void* thisInterface, Steinberg_int64 size);

} Steinberg_ISizeableStreamVtbl;

typedef struct Steinberg_ISizeableStream
{
    struct Steinberg_ISizeableStreamVtbl* lpVtbl;
} Steinberg_ISizeableStream;

static const Steinberg_TUID Steinberg_ISizeableStream_iid = SMTG_INLINE_UID (0x04F9549E, 0xE02F4E6E, 0x87E86A87, 0x47F4E17F);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstnoteexpression.h", line 165 */

typedef struct Steinberg_Vst_INoteExpressionControllerVtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods defined in "Steinberg_Vst_INoteExpressionController": */
    Steinberg_int32 (SMTG_STDMETHODCALLTYPE* getNoteExpressionCount) (void* thisInterface, Steinberg_int32 busIndex, Steinberg_int16 channel);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* getNoteExpressionInfo) (void* thisInterface, Steinberg_int32 busIndex, Steinberg_int16 channel, Steinberg_int32 noteExpressionIndex, struct Steinberg_Vst_NoteExpressionTypeInfo* info);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* getNoteExpressionStringByValue) (void* thisInterface, Steinberg_int32 busIndex, Steinberg_int16 channel, Steinberg_Vst_NoteExpressionTypeID id, Steinberg_Vst_NoteExpressionValue valueNormalized, Steinberg_Vst_String128 string);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* getNoteExpressionValueByString) (void* thisInterface, Steinberg_int32 busIndex, Steinberg_int16 channel, Steinberg_Vst_NoteExpressionTypeID id, const Steinberg_Vst_TChar* string, Steinberg_Vst_NoteExpressionValue* valueNormalized);

} Steinberg_Vst_INoteExpressionControllerVtbl;

typedef struct Steinberg_Vst_INoteExpressionController
{
    struct Steinberg_Vst_INoteExpressionControllerVtbl* lpVtbl;
} Steinberg_Vst_INoteExpressionController;

static const Steinberg_TUID Steinberg_Vst_INoteExpressionController_iid = SMTG_INLINE_UID (0xB7F8F859, 0x41234872, 0x91169581, 0x4F3721A3);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstnoteexpression.h", line 234 */

typedef struct Steinberg_Vst_IKeyswitchControllerVtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods defined in "Steinberg_Vst_IKeyswitchController": */
    Steinberg_int32 (SMTG_STDMETHODCALLTYPE* getKeyswitchCount) (void* thisInterface, Steinberg_int32 busIndex, Steinberg_int16 channel);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* getKeyswitchInfo) (void* thisInterface, Steinberg_int32 busIndex, Steinberg_int16 channel, Steinberg_int32 keySwitchIndex, struct Steinberg_Vst_KeyswitchInfo* info);

} Steinberg_Vst_IKeyswitchControllerVtbl;

typedef struct Steinberg_Vst_IKeyswitchController
{
    struct Steinberg_Vst_IKeyswitchControllerVtbl* lpVtbl;
} Steinberg_Vst_IKeyswitchController;

static const Steinberg_TUID Steinberg_Vst_IKeyswitchController_iid = SMTG_INLINE_UID (0x1F2F76D3, 0xBFFB4B96, 0xB99527A5, 0x5EBCCEF4);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstphysicalui.h", line 149 */

typedef struct Steinberg_Vst_INoteExpressionPhysicalUIMappingVtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods defined in "Steinberg_Vst_INoteExpressionPhysicalUIMapping": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* getPhysicalUIMapping) (void* thisInterface, Steinberg_int32 busIndex, Steinberg_int16 channel, struct Steinberg_Vst_PhysicalUIMapList* list);

} Steinberg_Vst_INoteExpressionPhysicalUIMappingVtbl;

typedef struct Steinberg_Vst_INoteExpressionPhysicalUIMapping
{
    struct Steinberg_Vst_INoteExpressionPhysicalUIMappingVtbl* lpVtbl;
} Steinberg_Vst_INoteExpressionPhysicalUIMapping;

static const Steinberg_TUID Steinberg_Vst_INoteExpressionPhysicalUIMapping_iid = SMTG_INLINE_UID (0xB03078FF, 0x94D24AC8, 0x90CCD303, 0xD4133324);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/base/ipluginbase.h", line 36 */

typedef struct Steinberg_IPluginBaseVtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods defined in "Steinberg_IPluginBase": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* initialize) (void* thisInterface, struct Steinberg_FUnknown* context);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* terminate) (void* thisInterface);

} Steinberg_IPluginBaseVtbl;

typedef struct Steinberg_IPluginBase
{
    struct Steinberg_IPluginBaseVtbl* lpVtbl;
} Steinberg_IPluginBase;

static const Steinberg_TUID Steinberg_IPluginBase_iid = SMTG_INLINE_UID (0x22888DDB, 0x156E45AE, 0x8358B348, 0x08190625);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/base/ipluginbase.h", line 192 */

typedef struct Steinberg_IPluginFactoryVtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods defined in "Steinberg_IPluginFactory": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* getFactoryInfo) (void* thisInterface, struct Steinberg_PFactoryInfo* info);
    Steinberg_int32 (SMTG_STDMETHODCALLTYPE* countClasses) (void* thisInterface);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* getClassInfo) (void* thisInterface, Steinberg_int32 index, struct Steinberg_PClassInfo* info);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* createInstance) (void* thisInterface, Steinberg_FIDString cid, Steinberg_FIDString iid, void** obj);

} Steinberg_IPluginFactoryVtbl;

typedef struct Steinberg_IPluginFactory
{
    struct Steinberg_IPluginFactoryVtbl* lpVtbl;
} Steinberg_IPluginFactory;

static const Steinberg_TUID Steinberg_IPluginFactory_iid = SMTG_INLINE_UID (0x7A4D811C, 0x52114A1F, 0xAED9D2EE, 0x0B43BF9F);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/base/ipluginbase.h", line 320 */

typedef struct Steinberg_IPluginFactory2Vtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods derived from "Steinberg_IPluginFactory": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* getFactoryInfo) (void* thisInterface, struct Steinberg_PFactoryInfo* info);
    Steinberg_int32 (SMTG_STDMETHODCALLTYPE* countClasses) (void* thisInterface);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* getClassInfo) (void* thisInterface, Steinberg_int32 index, struct Steinberg_PClassInfo* info);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* createInstance) (void* thisInterface, Steinberg_FIDString cid, Steinberg_FIDString iid, void** obj);

    /* methods defined in "Steinberg_IPluginFactory2": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* getClassInfo2) (void* thisInterface, Steinberg_int32 index, struct Steinberg_PClassInfo2* info);

} Steinberg_IPluginFactory2Vtbl;

typedef struct Steinberg_IPluginFactory2
{
    struct Steinberg_IPluginFactory2Vtbl* lpVtbl;
} Steinberg_IPluginFactory2;

static const Steinberg_TUID Steinberg_IPluginFactory2_iid = SMTG_INLINE_UID (0x0007B650, 0xF24B4C0B, 0xA464EDB9, 0xF00B2ABB);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/base/ipluginbase.h", line 446 */

typedef struct Steinberg_IPluginFactory3Vtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods derived from "Steinberg_IPluginFactory": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* getFactoryInfo) (void* thisInterface, struct Steinberg_PFactoryInfo* info);
    Steinberg_int32 (SMTG_STDMETHODCALLTYPE* countClasses) (void* thisInterface);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* getClassInfo) (void* thisInterface, Steinberg_int32 index, struct Steinberg_PClassInfo* info);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* createInstance) (void* thisInterface, Steinberg_FIDString cid, Steinberg_FIDString iid, void** obj);

    /* methods derived from "Steinberg_IPluginFactory2": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* getClassInfo2) (void* thisInterface, Steinberg_int32 index, struct Steinberg_PClassInfo2* info);

    /* methods defined in "Steinberg_IPluginFactory3": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* getClassInfoUnicode) (void* thisInterface, Steinberg_int32 index, struct Steinberg_PClassInfoW* info);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* setHostContext) (void* thisInterface, struct Steinberg_FUnknown* context);

} Steinberg_IPluginFactory3Vtbl;

typedef struct Steinberg_IPluginFactory3
{
    struct Steinberg_IPluginFactory3Vtbl* lpVtbl;
} Steinberg_IPluginFactory3;

static const Steinberg_TUID Steinberg_IPluginFactory3_iid = SMTG_INLINE_UID (0x4555A2AB, 0xC1234E57, 0x9B122910, 0x36878931);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstcomponent.h", line 157 */

typedef struct Steinberg_Vst_IComponentVtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods derived from "Steinberg_IPluginBase": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* initialize) (void* thisInterface, struct Steinberg_FUnknown* context);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* terminate) (void* thisInterface);

    /* methods defined in "Steinberg_Vst_IComponent": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* getControllerClassId) (void* thisInterface, Steinberg_TUID classId);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* setIoMode) (void* thisInterface, Steinberg_Vst_IoMode mode);
    Steinberg_int32 (SMTG_STDMETHODCALLTYPE* getBusCount) (void* thisInterface, Steinberg_Vst_MediaType type, Steinberg_Vst_BusDirection dir);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* getBusInfo) (void* thisInterface, Steinberg_Vst_MediaType type, Steinberg_Vst_BusDirection dir, Steinberg_int32 index, struct Steinberg_Vst_BusInfo* bus);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* getRoutingInfo) (void* thisInterface, struct Steinberg_Vst_RoutingInfo* inInfo, struct Steinberg_Vst_RoutingInfo* outInfo);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* activateBus) (void* thisInterface, Steinberg_Vst_MediaType type, Steinberg_Vst_BusDirection dir, Steinberg_int32 index, Steinberg_TBool state);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* setActive) (void* thisInterface, Steinberg_TBool state);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* setState) (void* thisInterface, struct Steinberg_IBStream* state);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* getState) (void* thisInterface, struct Steinberg_IBStream* state);

} Steinberg_Vst_IComponentVtbl;

typedef struct Steinberg_Vst_IComponent
{
    struct Steinberg_Vst_IComponentVtbl* lpVtbl;
} Steinberg_Vst_IComponent;

static const Steinberg_TUID Steinberg_Vst_IComponent_iid = SMTG_INLINE_UID (0xE831FF31, 0xF2D54301, 0x928EBBEE, 0x25697802);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstattributes.h", line 40 */

typedef struct Steinberg_Vst_IAttributeListVtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods defined in "Steinberg_Vst_IAttributeList": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* setInt) (void* thisInterface, Steinberg_Vst_IAttributeList_AttrID id, Steinberg_int64 value);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* getInt) (void* thisInterface, Steinberg_Vst_IAttributeList_AttrID id, Steinberg_int64* value);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* setFloat) (void* thisInterface, Steinberg_Vst_IAttributeList_AttrID id, double value);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* getFloat) (void* thisInterface, Steinberg_Vst_IAttributeList_AttrID id, double* value);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* setString) (void* thisInterface, Steinberg_Vst_IAttributeList_AttrID id, const Steinberg_Vst_TChar* string);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* getString) (void* thisInterface, Steinberg_Vst_IAttributeList_AttrID id, Steinberg_Vst_TChar* string, Steinberg_uint32 sizeInBytes);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* setBinary) (void* thisInterface, Steinberg_Vst_IAttributeList_AttrID id, const void* data, Steinberg_uint32 sizeInBytes);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* getBinary) (void* thisInterface, Steinberg_Vst_IAttributeList_AttrID id, const void** data, Steinberg_uint32* sizeInBytes);

} Steinberg_Vst_IAttributeListVtbl;

typedef struct Steinberg_Vst_IAttributeList
{
    struct Steinberg_Vst_IAttributeListVtbl* lpVtbl;
} Steinberg_Vst_IAttributeList;

static const Steinberg_TUID Steinberg_Vst_IAttributeList_iid = SMTG_INLINE_UID (0x1E5F0AEB, 0xCC7F4533, 0xA2544011, 0x38AD5EE4);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstattributes.h", line 129 */

typedef struct Steinberg_Vst_IStreamAttributesVtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods defined in "Steinberg_Vst_IStreamAttributes": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* getFileName) (void* thisInterface, Steinberg_Vst_String128 name);
    struct Steinberg_Vst_IAttributeList* (SMTG_STDMETHODCALLTYPE* getAttributes) (void* thisInterface);

} Steinberg_Vst_IStreamAttributesVtbl;

typedef struct Steinberg_Vst_IStreamAttributes
{
    struct Steinberg_Vst_IStreamAttributesVtbl* lpVtbl;
} Steinberg_Vst_IStreamAttributes;

static const Steinberg_TUID Steinberg_Vst_IStreamAttributes_iid = SMTG_INLINE_UID (0xD6CE2FFC, 0xEFAF4B8C, 0x9E74F1BB, 0x12DA44B4);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivsteditcontroller.h", line 171 */

typedef struct Steinberg_Vst_IComponentHandlerVtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods defined in "Steinberg_Vst_IComponentHandler": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* beginEdit) (void* thisInterface, Steinberg_Vst_ParamID id);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* performEdit) (void* thisInterface, Steinberg_Vst_ParamID id, Steinberg_Vst_ParamValue valueNormalized);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* endEdit) (void* thisInterface, Steinberg_Vst_ParamID id);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* restartComponent) (void* thisInterface, Steinberg_int32 flags);

} Steinberg_Vst_IComponentHandlerVtbl;

typedef struct Steinberg_Vst_IComponentHandler
{
    struct Steinberg_Vst_IComponentHandlerVtbl* lpVtbl;
} Steinberg_Vst_IComponentHandler;

static const Steinberg_TUID Steinberg_Vst_IComponentHandler_iid = SMTG_INLINE_UID (0x93A0BEA3, 0x0BD045DB, 0x8E890B0C, 0xC1E46AC6);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivsteditcontroller.h", line 255 */

typedef struct Steinberg_Vst_IComponentHandler2Vtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods defined in "Steinberg_Vst_IComponentHandler2": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* setDirty) (void* thisInterface, Steinberg_TBool state);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* requestOpenEditor) (void* thisInterface, Steinberg_FIDString name);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* startGroupEdit) (void* thisInterface);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* finishGroupEdit) (void* thisInterface);

} Steinberg_Vst_IComponentHandler2Vtbl;

typedef struct Steinberg_Vst_IComponentHandler2
{
    struct Steinberg_Vst_IComponentHandler2Vtbl* lpVtbl;
} Steinberg_Vst_IComponentHandler2;

static const Steinberg_TUID Steinberg_Vst_IComponentHandler2_iid = SMTG_INLINE_UID (0xF040B4B3, 0xA36045EC, 0xABCDC045, 0xB4D5A2CC);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivsteditcontroller.h", line 306 */

typedef struct Steinberg_Vst_IComponentHandlerBusActivationVtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods defined in "Steinberg_Vst_IComponentHandlerBusActivation": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* requestBusActivation) (void* thisInterface, Steinberg_Vst_MediaType type, Steinberg_Vst_BusDirection dir, Steinberg_int32 index, Steinberg_TBool state);

} Steinberg_Vst_IComponentHandlerBusActivationVtbl;

typedef struct Steinberg_Vst_IComponentHandlerBusActivation
{
    struct Steinberg_Vst_IComponentHandlerBusActivationVtbl* lpVtbl;
} Steinberg_Vst_IComponentHandlerBusActivation;

static const Steinberg_TUID Steinberg_Vst_IComponentHandlerBusActivation_iid = SMTG_INLINE_UID (0x067D02C1, 0x5B4E274D, 0xA92D90FD, 0x6EAF7240);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivsteditcontroller.h", line 361 */

typedef struct Steinberg_Vst_IProgressVtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods defined in "Steinberg_Vst_IProgress": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* start) (void* thisInterface, Steinberg_Vst_IProgress_ProgressType type, const Steinberg_tchar* optionalDescription, Steinberg_Vst_IProgress_ID* outID);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* update) (void* thisInterface, Steinberg_Vst_IProgress_ID id, Steinberg_Vst_ParamValue normValue);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* finish) (void* thisInterface, Steinberg_Vst_IProgress_ID id);

} Steinberg_Vst_IProgressVtbl;

typedef struct Steinberg_Vst_IProgress
{
    struct Steinberg_Vst_IProgressVtbl* lpVtbl;
} Steinberg_Vst_IProgress;

static const Steinberg_TUID Steinberg_Vst_IProgress_iid = SMTG_INLINE_UID (0x00C9DC5B, 0x9D904254, 0x91A388C8, 0xB4E91B69);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivsteditcontroller.h", line 398 */

typedef struct Steinberg_Vst_IEditControllerVtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods derived from "Steinberg_IPluginBase": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* initialize) (void* thisInterface, struct Steinberg_FUnknown* context);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* terminate) (void* thisInterface);

    /* methods defined in "Steinberg_Vst_IEditController": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* setComponentState) (void* thisInterface, struct Steinberg_IBStream* state);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* setState) (void* thisInterface, struct Steinberg_IBStream* state);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* getState) (void* thisInterface, struct Steinberg_IBStream* state);
    Steinberg_int32 (SMTG_STDMETHODCALLTYPE* getParameterCount) (void* thisInterface);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* getParameterInfo) (void* thisInterface, Steinberg_int32 paramIndex, struct Steinberg_Vst_ParameterInfo* info);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* getParamStringByValue) (void* thisInterface, Steinberg_Vst_ParamID id, Steinberg_Vst_ParamValue valueNormalized, Steinberg_Vst_String128 string);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* getParamValueByString) (void* thisInterface, Steinberg_Vst_ParamID id, Steinberg_Vst_TChar* string, Steinberg_Vst_ParamValue* valueNormalized);
    Steinberg_Vst_ParamValue (SMTG_STDMETHODCALLTYPE* normalizedParamToPlain) (void* thisInterface, Steinberg_Vst_ParamID id, Steinberg_Vst_ParamValue valueNormalized);
    Steinberg_Vst_ParamValue (SMTG_STDMETHODCALLTYPE* plainParamToNormalized) (void* thisInterface, Steinberg_Vst_ParamID id, Steinberg_Vst_ParamValue plainValue);
    Steinberg_Vst_ParamValue (SMTG_STDMETHODCALLTYPE* getParamNormalized) (void* thisInterface, Steinberg_Vst_ParamID id);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* setParamNormalized) (void* thisInterface, Steinberg_Vst_ParamID id, Steinberg_Vst_ParamValue value);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* setComponentHandler) (void* thisInterface, struct Steinberg_Vst_IComponentHandler* handler);
    struct Steinberg_IPlugView* (SMTG_STDMETHODCALLTYPE* createView) (void* thisInterface, Steinberg_FIDString name);

} Steinberg_Vst_IEditControllerVtbl;

typedef struct Steinberg_Vst_IEditController
{
    struct Steinberg_Vst_IEditControllerVtbl* lpVtbl;
} Steinberg_Vst_IEditController;

static const Steinberg_TUID Steinberg_Vst_IEditController_iid = SMTG_INLINE_UID (0xDCD7BBE3, 0x7742448D, 0xA874AACC, 0x979C759E);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivsteditcontroller.h", line 481 */

typedef struct Steinberg_Vst_IEditController2Vtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods defined in "Steinberg_Vst_IEditController2": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* setKnobMode) (void* thisInterface, Steinberg_Vst_KnobMode mode);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* openHelp) (void* thisInterface, Steinberg_TBool onlyCheck);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* openAboutBox) (void* thisInterface, Steinberg_TBool onlyCheck);

} Steinberg_Vst_IEditController2Vtbl;

typedef struct Steinberg_Vst_IEditController2
{
    struct Steinberg_Vst_IEditController2Vtbl* lpVtbl;
} Steinberg_Vst_IEditController2;

static const Steinberg_TUID Steinberg_Vst_IEditController2_iid = SMTG_INLINE_UID (0x7F4EFE59, 0xF3204967, 0xAC27A3AE, 0xAFB63038);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivsteditcontroller.h", line 557 */

typedef struct Steinberg_Vst_IMidiMappingVtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods defined in "Steinberg_Vst_IMidiMapping": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* getMidiControllerAssignment) (void* thisInterface, Steinberg_int32 busIndex, Steinberg_int16 channel, Steinberg_Vst_CtrlNumber midiControllerNumber, Steinberg_Vst_ParamID* id);

} Steinberg_Vst_IMidiMappingVtbl;

typedef struct Steinberg_Vst_IMidiMapping
{
    struct Steinberg_Vst_IMidiMappingVtbl* lpVtbl;
} Steinberg_Vst_IMidiMapping;

static const Steinberg_TUID Steinberg_Vst_IMidiMapping_iid = SMTG_INLINE_UID (0xDF0FF9F7, 0x49B74669, 0xB63AB732, 0x7ADBF5E5);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivsteditcontroller.h", line 601 */

typedef struct Steinberg_Vst_IEditControllerHostEditingVtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods defined in "Steinberg_Vst_IEditControllerHostEditing": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* beginEditFromHost) (void* thisInterface, Steinberg_Vst_ParamID paramID);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* endEditFromHost) (void* thisInterface, Steinberg_Vst_ParamID paramID);

} Steinberg_Vst_IEditControllerHostEditingVtbl;

typedef struct Steinberg_Vst_IEditControllerHostEditing
{
    struct Steinberg_Vst_IEditControllerHostEditingVtbl* lpVtbl;
} Steinberg_Vst_IEditControllerHostEditing;

static const Steinberg_TUID Steinberg_Vst_IEditControllerHostEditing_iid = SMTG_INLINE_UID (0xC1271208, 0x70594098, 0xB9DD34B3, 0x6BB0195E);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstevents.h", line 196 */

typedef struct Steinberg_Vst_IEventListVtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods defined in "Steinberg_Vst_IEventList": */
    Steinberg_int32 (SMTG_STDMETHODCALLTYPE* getEventCount) (void* thisInterface);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* getEvent) (void* thisInterface, Steinberg_int32 index, struct Steinberg_Vst_Event* e);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* addEvent) (void* thisInterface, struct Steinberg_Vst_Event* e);

} Steinberg_Vst_IEventListVtbl;

typedef struct Steinberg_Vst_IEventList
{
    struct Steinberg_Vst_IEventListVtbl* lpVtbl;
} Steinberg_Vst_IEventList;

static const Steinberg_TUID Steinberg_Vst_IEventList_iid = SMTG_INLINE_UID (0x3A2C4214, 0x346349FE, 0xB2C4F397, 0xB9695A44);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstmessage.h", line 40 */

typedef struct Steinberg_Vst_IMessageVtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods defined in "Steinberg_Vst_IMessage": */
    Steinberg_FIDString (SMTG_STDMETHODCALLTYPE* getMessageID) (void* thisInterface);
    void (SMTG_STDMETHODCALLTYPE* setMessageID) (void* thisInterface, Steinberg_FIDString id);
    struct Steinberg_Vst_IAttributeList* (SMTG_STDMETHODCALLTYPE* getAttributes) (void* thisInterface);

} Steinberg_Vst_IMessageVtbl;

typedef struct Steinberg_Vst_IMessage
{
    struct Steinberg_Vst_IMessageVtbl* lpVtbl;
} Steinberg_Vst_IMessage;

static const Steinberg_TUID Steinberg_Vst_IMessage_iid = SMTG_INLINE_UID (0x936F033B, 0xC6C047DB, 0xBB0882F8, 0x13C1E613);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstmessage.h", line 72 */

typedef struct Steinberg_Vst_IConnectionPointVtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods defined in "Steinberg_Vst_IConnectionPoint": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* connect) (void* thisInterface, struct Steinberg_Vst_IConnectionPoint* other);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* disconnect) (void* thisInterface, struct Steinberg_Vst_IConnectionPoint* other);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* notify) (void* thisInterface, struct Steinberg_Vst_IMessage* message);

} Steinberg_Vst_IConnectionPointVtbl;

typedef struct Steinberg_Vst_IConnectionPoint
{
    struct Steinberg_Vst_IConnectionPointVtbl* lpVtbl;
} Steinberg_Vst_IConnectionPoint;

static const Steinberg_TUID Steinberg_Vst_IConnectionPoint_iid = SMTG_INLINE_UID (0x70A4156F, 0x6E6E4026, 0x989148BF, 0xAA60D8D1);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstrepresentation.h", line 180 */

typedef struct Steinberg_Vst_IXmlRepresentationControllerVtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods defined in "Steinberg_Vst_IXmlRepresentationController": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* getXmlRepresentationStream) (void* thisInterface, struct Steinberg_Vst_RepresentationInfo* info, struct Steinberg_IBStream* stream);

} Steinberg_Vst_IXmlRepresentationControllerVtbl;

typedef struct Steinberg_Vst_IXmlRepresentationController
{
    struct Steinberg_Vst_IXmlRepresentationControllerVtbl* lpVtbl;
} Steinberg_Vst_IXmlRepresentationController;

static const Steinberg_TUID Steinberg_Vst_IXmlRepresentationController_iid = SMTG_INLINE_UID (0xA81A0471, 0x48C34DC4, 0xAC30C9E1, 0x3C8393D5);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstcontextmenu.h", line 118 */

typedef struct Steinberg_Vst_IComponentHandler3Vtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods defined in "Steinberg_Vst_IComponentHandler3": */
    struct Steinberg_Vst_IContextMenu* (SMTG_STDMETHODCALLTYPE* createContextMenu) (void* thisInterface, struct Steinberg_IPlugView* plugView, const Steinberg_Vst_ParamID* paramID);

} Steinberg_Vst_IComponentHandler3Vtbl;

typedef struct Steinberg_Vst_IComponentHandler3
{
    struct Steinberg_Vst_IComponentHandler3Vtbl* lpVtbl;
} Steinberg_Vst_IComponentHandler3;

static const Steinberg_TUID Steinberg_Vst_IComponentHandler3_iid = SMTG_INLINE_UID (0x69F11617, 0xD26B400D, 0xA4B6B964, 0x7B6EBBAB);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstcontextmenu.h", line 146 */

typedef struct Steinberg_Vst_IContextMenuTargetVtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods defined in "Steinberg_Vst_IContextMenuTarget": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* executeMenuItem) (void* thisInterface, Steinberg_int32 tag);

} Steinberg_Vst_IContextMenuTargetVtbl;

typedef struct Steinberg_Vst_IContextMenuTarget
{
    struct Steinberg_Vst_IContextMenuTargetVtbl* lpVtbl;
} Steinberg_Vst_IContextMenuTarget;

static const Steinberg_TUID Steinberg_Vst_IContextMenuTarget_iid = SMTG_INLINE_UID (0x3CDF2E75, 0x85D34144, 0xBF86D36B, 0xD7C4894D);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstcontextmenu.h", line 187 */

typedef struct Steinberg_Vst_IContextMenuVtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods defined in "Steinberg_Vst_IContextMenu": */
    Steinberg_int32 (SMTG_STDMETHODCALLTYPE* getItemCount) (void* thisInterface);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* getItem) (void* thisInterface, Steinberg_int32 index, Steinberg_Vst_IContextMenu_Item* item, struct Steinberg_Vst_IContextMenuTarget** target);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* addItem) (void* thisInterface, const Steinberg_Vst_IContextMenu_Item* item, struct Steinberg_Vst_IContextMenuTarget* target);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* removeItem) (void* thisInterface, const Steinberg_Vst_IContextMenu_Item* item, struct Steinberg_Vst_IContextMenuTarget* target);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* popup) (void* thisInterface, Steinberg_UCoord x, Steinberg_UCoord y);

} Steinberg_Vst_IContextMenuVtbl;

typedef struct Steinberg_Vst_IContextMenu
{
    struct Steinberg_Vst_IContextMenuVtbl* lpVtbl;
} Steinberg_Vst_IContextMenu;

static const Steinberg_TUID Steinberg_Vst_IContextMenu_iid = SMTG_INLINE_UID (0x2E93C863, 0x0C9C4588, 0x97DBECF5, 0xAD17817D);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstmidilearn.h", line 90 */

typedef struct Steinberg_Vst_IMidiLearnVtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods defined in "Steinberg_Vst_IMidiLearn": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* onLiveMIDIControllerInput) (void* thisInterface, Steinberg_int32 busIndex, Steinberg_int16 channel, Steinberg_Vst_CtrlNumber midiCC);

} Steinberg_Vst_IMidiLearnVtbl;

typedef struct Steinberg_Vst_IMidiLearn
{
    struct Steinberg_Vst_IMidiLearnVtbl* lpVtbl;
} Steinberg_Vst_IMidiLearn;

static const Steinberg_TUID Steinberg_Vst_IMidiLearn_iid = SMTG_INLINE_UID (0x6B2449CC, 0x419740B5, 0xAB3C79DA, 0xC5FE5C86);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstchannelcontextinfo.h", line 148 */

typedef struct Steinberg_Vst_ChannelContext_IInfoListenerVtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods defined in "Steinberg_Vst_ChannelContext_IInfoListener": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* setChannelContextInfos) (void* thisInterface, struct Steinberg_Vst_IAttributeList* list);

} Steinberg_Vst_ChannelContext_IInfoListenerVtbl;

typedef struct Steinberg_Vst_ChannelContext_IInfoListener
{
    struct Steinberg_Vst_ChannelContext_IInfoListenerVtbl* lpVtbl;
} Steinberg_Vst_ChannelContext_IInfoListener;

static const Steinberg_TUID Steinberg_Vst_ChannelContext_IInfoListener_iid = SMTG_INLINE_UID (0x0F194781, 0x8D984ADA, 0xBBA0C1EF, 0xC011D8D0);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstprefetchablesupport.h", line 79 */

typedef struct Steinberg_Vst_IPrefetchableSupportVtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods defined in "Steinberg_Vst_IPrefetchableSupport": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* getPrefetchableSupport) (void* thisInterface, Steinberg_Vst_PrefetchableSupport* prefetchable);

} Steinberg_Vst_IPrefetchableSupportVtbl;

typedef struct Steinberg_Vst_IPrefetchableSupport
{
    struct Steinberg_Vst_IPrefetchableSupportVtbl* lpVtbl;
} Steinberg_Vst_IPrefetchableSupport;

static const Steinberg_TUID Steinberg_Vst_IPrefetchableSupport_iid = SMTG_INLINE_UID (0x8AE54FDA, 0xE93046B9, 0xA28555BC, 0xDC98E21E);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstautomationstate.h", line 39 */

typedef struct Steinberg_Vst_IAutomationStateVtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods defined in "Steinberg_Vst_IAutomationState": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* setAutomationState) (void* thisInterface, Steinberg_int32 state);

} Steinberg_Vst_IAutomationStateVtbl;

typedef struct Steinberg_Vst_IAutomationState
{
    struct Steinberg_Vst_IAutomationStateVtbl* lpVtbl;
} Steinberg_Vst_IAutomationState;

static const Steinberg_TUID Steinberg_Vst_IAutomationState_iid = SMTG_INLINE_UID (0xB4E8287F, 0x1BB346AA, 0x83A46667, 0x68937BAB);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstinterappaudio.h", line 38 */

typedef struct Steinberg_Vst_IInterAppAudioHostVtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods defined in "Steinberg_Vst_IInterAppAudioHost": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* getScreenSize) (void* thisInterface, struct Steinberg_ViewRect* size, float* scale);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* connectedToHost) (void* thisInterface);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* switchToHost) (void* thisInterface);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* sendRemoteControlEvent) (void* thisInterface, Steinberg_uint32 event);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* getHostIcon) (void* thisInterface, void** icon);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* scheduleEventFromUI) (void* thisInterface, struct Steinberg_Vst_Event* event);
    struct Steinberg_Vst_IInterAppAudioPresetManager* (SMTG_STDMETHODCALLTYPE* createPresetManager) (void* thisInterface, const Steinberg_TUID* cid);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* showSettingsView) (void* thisInterface);

} Steinberg_Vst_IInterAppAudioHostVtbl;

typedef struct Steinberg_Vst_IInterAppAudioHost
{
    struct Steinberg_Vst_IInterAppAudioHostVtbl* lpVtbl;
} Steinberg_Vst_IInterAppAudioHost;

static const Steinberg_TUID Steinberg_Vst_IInterAppAudioHost_iid = SMTG_INLINE_UID (0x0CE5743D, 0x68DF415E, 0xAE285BD4, 0xE2CDC8FD);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstinterappaudio.h", line 101 */

typedef struct Steinberg_Vst_IInterAppAudioConnectionNotificationVtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods defined in "Steinberg_Vst_IInterAppAudioConnectionNotification": */
    void (SMTG_STDMETHODCALLTYPE* onInterAppAudioConnectionStateChange) (void* thisInterface, Steinberg_TBool newState);

} Steinberg_Vst_IInterAppAudioConnectionNotificationVtbl;

typedef struct Steinberg_Vst_IInterAppAudioConnectionNotification
{
    struct Steinberg_Vst_IInterAppAudioConnectionNotificationVtbl* lpVtbl;
} Steinberg_Vst_IInterAppAudioConnectionNotification;

static const Steinberg_TUID Steinberg_Vst_IInterAppAudioConnectionNotification_iid = SMTG_INLINE_UID (0x6020C72D, 0x5FC24AA1, 0xB0950DB5, 0xD7D6D5CF);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstinterappaudio.h", line 122 */

typedef struct Steinberg_Vst_IInterAppAudioPresetManagerVtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods defined in "Steinberg_Vst_IInterAppAudioPresetManager": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* runLoadPresetBrowser) (void* thisInterface);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* runSavePresetBrowser) (void* thisInterface);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* loadNextPreset) (void* thisInterface);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* loadPreviousPreset) (void* thisInterface);

} Steinberg_Vst_IInterAppAudioPresetManagerVtbl;

typedef struct Steinberg_Vst_IInterAppAudioPresetManager
{
    struct Steinberg_Vst_IInterAppAudioPresetManagerVtbl* lpVtbl;
} Steinberg_Vst_IInterAppAudioPresetManager;

static const Steinberg_TUID Steinberg_Vst_IInterAppAudioPresetManager_iid = SMTG_INLINE_UID (0xADE6FCC4, 0x46C94E1D, 0xB3B49A80, 0xC93FEFDD);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstaudioprocessor.h", line 258 */

typedef struct Steinberg_Vst_IAudioProcessorVtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods defined in "Steinberg_Vst_IAudioProcessor": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* setBusArrangements) (void* thisInterface, Steinberg_Vst_SpeakerArrangement* inputs, Steinberg_int32 numIns, Steinberg_Vst_SpeakerArrangement* outputs, Steinberg_int32 numOuts);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* getBusArrangement) (void* thisInterface, Steinberg_Vst_BusDirection dir, Steinberg_int32 index, Steinberg_Vst_SpeakerArrangement* arr);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* canProcessSampleSize) (void* thisInterface, Steinberg_int32 symbolicSampleSize);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* getLatencySamples) (void* thisInterface);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* setupProcessing) (void* thisInterface, struct Steinberg_Vst_ProcessSetup* setup);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* setProcessing) (void* thisInterface, Steinberg_TBool state);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* process) (void* thisInterface, struct Steinberg_Vst_ProcessData* data);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* getTailSamples) (void* thisInterface);

} Steinberg_Vst_IAudioProcessorVtbl;

typedef struct Steinberg_Vst_IAudioProcessor
{
    struct Steinberg_Vst_IAudioProcessorVtbl* lpVtbl;
} Steinberg_Vst_IAudioProcessor;

static const Steinberg_TUID Steinberg_Vst_IAudioProcessor_iid = SMTG_INLINE_UID (0x42043F99, 0xB7DA453C, 0xA569E79D, 0x9AAEC33D);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstaudioprocessor.h", line 366 */

typedef struct Steinberg_Vst_IAudioPresentationLatencyVtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods defined in "Steinberg_Vst_IAudioPresentationLatency": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* setAudioPresentationLatencySamples) (void* thisInterface, Steinberg_Vst_BusDirection dir, Steinberg_int32 busIndex, Steinberg_uint32 latencyInSamples);

} Steinberg_Vst_IAudioPresentationLatencyVtbl;

typedef struct Steinberg_Vst_IAudioPresentationLatency
{
    struct Steinberg_Vst_IAudioPresentationLatencyVtbl* lpVtbl;
} Steinberg_Vst_IAudioPresentationLatency;

static const Steinberg_TUID Steinberg_Vst_IAudioPresentationLatency_iid = SMTG_INLINE_UID (0x309ECE78, 0xEB7D4fae, 0x8B2225D9, 0x09FD08B6);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstaudioprocessor.h", line 399 */

typedef struct Steinberg_Vst_IProcessContextRequirementsVtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods defined in "Steinberg_Vst_IProcessContextRequirements": */
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* getProcessContextRequirements) (void* thisInterface);

} Steinberg_Vst_IProcessContextRequirementsVtbl;

typedef struct Steinberg_Vst_IProcessContextRequirements
{
    struct Steinberg_Vst_IProcessContextRequirementsVtbl* lpVtbl;
} Steinberg_Vst_IProcessContextRequirements;

static const Steinberg_TUID Steinberg_Vst_IProcessContextRequirements_iid = SMTG_INLINE_UID (0x2A654303, 0xEF764E3D, 0x95B5FE83, 0x730EF6D0);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivsthostapplication.h", line 35 */

typedef struct Steinberg_Vst_IHostApplicationVtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods defined in "Steinberg_Vst_IHostApplication": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* getName) (void* thisInterface, Steinberg_Vst_String128 name);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* createInstance) (void* thisInterface, Steinberg_TUID cid, Steinberg_TUID iid, void** obj);

} Steinberg_Vst_IHostApplicationVtbl;

typedef struct Steinberg_Vst_IHostApplication
{
    struct Steinberg_Vst_IHostApplicationVtbl* lpVtbl;
} Steinberg_Vst_IHostApplication;

static const Steinberg_TUID Steinberg_Vst_IHostApplication_iid = SMTG_INLINE_UID (0x58E595CC, 0xDB2D4969, 0x8B6AAF8C, 0x36A664E5);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivsthostapplication.h", line 74 */

typedef struct Steinberg_Vst_IVst3ToVst2WrapperVtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

} Steinberg_Vst_IVst3ToVst2WrapperVtbl;

typedef struct Steinberg_Vst_IVst3ToVst2Wrapper
{
    struct Steinberg_Vst_IVst3ToVst2WrapperVtbl* lpVtbl;
} Steinberg_Vst_IVst3ToVst2Wrapper;

static const Steinberg_TUID Steinberg_Vst_IVst3ToVst2Wrapper_iid = SMTG_INLINE_UID (0x29633AEC, 0x1D1C47E2, 0xBB85B97B, 0xD36EAC61);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivsthostapplication.h", line 94 */

typedef struct Steinberg_Vst_IVst3ToAUWrapperVtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

} Steinberg_Vst_IVst3ToAUWrapperVtbl;

typedef struct Steinberg_Vst_IVst3ToAUWrapper
{
    struct Steinberg_Vst_IVst3ToAUWrapperVtbl* lpVtbl;
} Steinberg_Vst_IVst3ToAUWrapper;

static const Steinberg_TUID Steinberg_Vst_IVst3ToAUWrapper_iid = SMTG_INLINE_UID (0xA3B8C6C5, 0xC0954688, 0xB0916F0B, 0xB697AA44);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivsthostapplication.h", line 114 */

typedef struct Steinberg_Vst_IVst3ToAAXWrapperVtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

} Steinberg_Vst_IVst3ToAAXWrapperVtbl;

typedef struct Steinberg_Vst_IVst3ToAAXWrapper
{
    struct Steinberg_Vst_IVst3ToAAXWrapperVtbl* lpVtbl;
} Steinberg_Vst_IVst3ToAAXWrapper;

static const Steinberg_TUID Steinberg_Vst_IVst3ToAAXWrapper_iid = SMTG_INLINE_UID (0x6D319DC6, 0x60C56242, 0xB32C951B, 0x93BEF4C6);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivsthostapplication.h", line 138 */

typedef struct Steinberg_Vst_IVst3WrapperMPESupportVtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods defined in "Steinberg_Vst_IVst3WrapperMPESupport": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* enableMPEInputProcessing) (void* thisInterface, Steinberg_TBool state);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* setMPEInputDeviceSettings) (void* thisInterface, Steinberg_int32 masterChannel, Steinberg_int32 memberBeginChannel, Steinberg_int32 memberEndChannel);

} Steinberg_Vst_IVst3WrapperMPESupportVtbl;

typedef struct Steinberg_Vst_IVst3WrapperMPESupport
{
    struct Steinberg_Vst_IVst3WrapperMPESupportVtbl* lpVtbl;
} Steinberg_Vst_IVst3WrapperMPESupport;

static const Steinberg_TUID Steinberg_Vst_IVst3WrapperMPESupport_iid = SMTG_INLINE_UID (0x44149067, 0x42CF4BF9, 0x8800B750, 0xF7359FE3);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstplugview.h", line 44 */

typedef struct Steinberg_Vst_IParameterFinderVtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods defined in "Steinberg_Vst_IParameterFinder": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* findParameter) (void* thisInterface, Steinberg_int32 xPos, Steinberg_int32 yPos, Steinberg_Vst_ParamID* resultTag);

} Steinberg_Vst_IParameterFinderVtbl;

typedef struct Steinberg_Vst_IParameterFinder
{
    struct Steinberg_Vst_IParameterFinderVtbl* lpVtbl;
} Steinberg_Vst_IParameterFinder;

static const Steinberg_TUID Steinberg_Vst_IParameterFinder_iid = SMTG_INLINE_UID (0x0F618302, 0x215D4587, 0xA512073C, 0x77B9D383);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstunits.h", line 80 */

typedef struct Steinberg_Vst_IUnitHandlerVtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods defined in "Steinberg_Vst_IUnitHandler": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* notifyUnitSelection) (void* thisInterface, Steinberg_Vst_UnitID unitId);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* notifyProgramListChange) (void* thisInterface, Steinberg_Vst_ProgramListID listId, Steinberg_int32 programIndex);

} Steinberg_Vst_IUnitHandlerVtbl;

typedef struct Steinberg_Vst_IUnitHandler
{
    struct Steinberg_Vst_IUnitHandlerVtbl* lpVtbl;
} Steinberg_Vst_IUnitHandler;

static const Steinberg_TUID Steinberg_Vst_IUnitHandler_iid = SMTG_INLINE_UID (0x4B5147F8, 0x4654486B, 0x8DAB30BA, 0x163A3C56);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstunits.h", line 115 */

typedef struct Steinberg_Vst_IUnitHandler2Vtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods defined in "Steinberg_Vst_IUnitHandler2": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* notifyUnitByBusChange) (void* thisInterface);

} Steinberg_Vst_IUnitHandler2Vtbl;

typedef struct Steinberg_Vst_IUnitHandler2
{
    struct Steinberg_Vst_IUnitHandler2Vtbl* lpVtbl;
} Steinberg_Vst_IUnitHandler2;

static const Steinberg_TUID Steinberg_Vst_IUnitHandler2_iid = SMTG_INLINE_UID (0xF89F8CDF, 0x699E4BA5, 0x96AAC9A4, 0x81452B01);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstunits.h", line 144 */

typedef struct Steinberg_Vst_IUnitInfoVtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods defined in "Steinberg_Vst_IUnitInfo": */
    Steinberg_int32 (SMTG_STDMETHODCALLTYPE* getUnitCount) (void* thisInterface);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* getUnitInfo) (void* thisInterface, Steinberg_int32 unitIndex, struct Steinberg_Vst_UnitInfo* info);
    Steinberg_int32 (SMTG_STDMETHODCALLTYPE* getProgramListCount) (void* thisInterface);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* getProgramListInfo) (void* thisInterface, Steinberg_int32 listIndex, struct Steinberg_Vst_ProgramListInfo* info);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* getProgramName) (void* thisInterface, Steinberg_Vst_ProgramListID listId, Steinberg_int32 programIndex, Steinberg_Vst_String128 name);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* getProgramInfo) (void* thisInterface, Steinberg_Vst_ProgramListID listId, Steinberg_int32 programIndex, Steinberg_Vst_CString attributeId, Steinberg_Vst_String128 attributeValue);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* hasProgramPitchNames) (void* thisInterface, Steinberg_Vst_ProgramListID listId, Steinberg_int32 programIndex);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* getProgramPitchName) (void* thisInterface, Steinberg_Vst_ProgramListID listId, Steinberg_int32 programIndex, Steinberg_int16 midiPitch, Steinberg_Vst_String128 name);
    Steinberg_Vst_UnitID (SMTG_STDMETHODCALLTYPE* getSelectedUnit) (void* thisInterface);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* selectUnit) (void* thisInterface, Steinberg_Vst_UnitID unitId);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* getUnitByBus) (void* thisInterface, Steinberg_Vst_MediaType type, Steinberg_Vst_BusDirection dir, Steinberg_int32 busIndex, Steinberg_int32 channel, Steinberg_Vst_UnitID* unitId);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* setUnitProgramData) (void* thisInterface, Steinberg_int32 listOrUnitId, Steinberg_int32 programIndex, struct Steinberg_IBStream* data);

} Steinberg_Vst_IUnitInfoVtbl;

typedef struct Steinberg_Vst_IUnitInfo
{
    struct Steinberg_Vst_IUnitInfoVtbl* lpVtbl;
} Steinberg_Vst_IUnitInfo;

static const Steinberg_TUID Steinberg_Vst_IUnitInfo_iid = SMTG_INLINE_UID (0x3D4BD6B5, 0x913A4FD2, 0xA886E768, 0xA5EB92C1);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstunits.h", line 214 */

typedef struct Steinberg_Vst_IProgramListDataVtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods defined in "Steinberg_Vst_IProgramListData": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* programDataSupported) (void* thisInterface, Steinberg_Vst_ProgramListID listId);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* getProgramData) (void* thisInterface, Steinberg_Vst_ProgramListID listId, Steinberg_int32 programIndex, struct Steinberg_IBStream* data);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* setProgramData) (void* thisInterface, Steinberg_Vst_ProgramListID listId, Steinberg_int32 programIndex, struct Steinberg_IBStream* data);

} Steinberg_Vst_IProgramListDataVtbl;

typedef struct Steinberg_Vst_IProgramListData
{
    struct Steinberg_Vst_IProgramListDataVtbl* lpVtbl;
} Steinberg_Vst_IProgramListData;

static const Steinberg_TUID Steinberg_Vst_IProgramListData_iid = SMTG_INLINE_UID (0x8683B01F, 0x7B354F70, 0xA2651DEC, 0x353AF4FF);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstunits.h", line 246 */

typedef struct Steinberg_Vst_IUnitDataVtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods defined in "Steinberg_Vst_IUnitData": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* unitDataSupported) (void* thisInterface, Steinberg_Vst_UnitID unitID);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* getUnitData) (void* thisInterface, Steinberg_Vst_UnitID unitId, struct Steinberg_IBStream* data);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* setUnitData) (void* thisInterface, Steinberg_Vst_UnitID unitId, struct Steinberg_IBStream* data);

} Steinberg_Vst_IUnitDataVtbl;

typedef struct Steinberg_Vst_IUnitData
{
    struct Steinberg_Vst_IUnitDataVtbl* lpVtbl;
} Steinberg_Vst_IUnitData;

static const Steinberg_TUID Steinberg_Vst_IUnitData_iid = SMTG_INLINE_UID (0x6C389611, 0xD391455D, 0xB870B833, 0x94A0EFDD);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstpluginterfacesupport.h", line 53 */

typedef struct Steinberg_Vst_IPlugInterfaceSupportVtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods defined in "Steinberg_Vst_IPlugInterfaceSupport": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* isPlugInterfaceSupported) (void* thisInterface, const Steinberg_TUID iid);

} Steinberg_Vst_IPlugInterfaceSupportVtbl;

typedef struct Steinberg_Vst_IPlugInterfaceSupport
{
    struct Steinberg_Vst_IPlugInterfaceSupportVtbl* lpVtbl;
} Steinberg_Vst_IPlugInterfaceSupport;

static const Steinberg_TUID Steinberg_Vst_IPlugInterfaceSupport_iid = SMTG_INLINE_UID (0x4FB58B9E, 0x9EAA4E0F, 0xAB361C1C, 0xCCB56FEA);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstparameterfunctionname.h", line 131 */

typedef struct Steinberg_Vst_IParameterFunctionNameVtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods defined in "Steinberg_Vst_IParameterFunctionName": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* getParameterIDFromFunctionName) (void* thisInterface, Steinberg_Vst_UnitID unitID, Steinberg_FIDString functionName, Steinberg_Vst_ParamID* paramID);

} Steinberg_Vst_IParameterFunctionNameVtbl;

typedef struct Steinberg_Vst_IParameterFunctionName
{
    struct Steinberg_Vst_IParameterFunctionNameVtbl* lpVtbl;
} Steinberg_Vst_IParameterFunctionName;

static const Steinberg_TUID Steinberg_Vst_IParameterFunctionName_iid = SMTG_INLINE_UID (0x6D21E1DC, 0x91199D4B, 0xA2A02FEF, 0x6C1AE55C);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstparameterchanges.h", line 84 */

typedef struct Steinberg_Vst_IParamValueQueueVtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods defined in "Steinberg_Vst_IParamValueQueue": */
    Steinberg_Vst_ParamID (SMTG_STDMETHODCALLTYPE* getParameterId) (void* thisInterface);
    Steinberg_int32 (SMTG_STDMETHODCALLTYPE* getPointCount) (void* thisInterface);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* getPoint) (void* thisInterface, Steinberg_int32 index, Steinberg_int32* sampleOffset, Steinberg_Vst_ParamValue* value);
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* addPoint) (void* thisInterface, Steinberg_int32 sampleOffset, Steinberg_Vst_ParamValue value, Steinberg_int32* index);

} Steinberg_Vst_IParamValueQueueVtbl;

typedef struct Steinberg_Vst_IParamValueQueue
{
    struct Steinberg_Vst_IParamValueQueueVtbl* lpVtbl;
} Steinberg_Vst_IParamValueQueue;

static const Steinberg_TUID Steinberg_Vst_IParamValueQueue_iid = SMTG_INLINE_UID (0x01263A18, 0xED074F6F, 0x98C9D356, 0x4686F9BA);

/*----------------------------------------------------------------------------------------------------------------------
Source: "pluginterfaces/vst/ivstparameterchanges.h", line 119 */

typedef struct Steinberg_Vst_IParameterChangesVtbl
{
    /* methods derived from "Steinberg_FUnknown": */
    Steinberg_tresult (SMTG_STDMETHODCALLTYPE* queryInterface) (void* thisInterface, const Steinberg_TUID iid, void** obj);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* addRef) (void* thisInterface);
    Steinberg_uint32 (SMTG_STDMETHODCALLTYPE* release) (void* thisInterface);

    /* methods defined in "Steinberg_Vst_IParameterChanges": */
    Steinberg_int32 (SMTG_STDMETHODCALLTYPE* getParameterCount) (void* thisInterface);
    struct Steinberg_Vst_IParamValueQueue* (SMTG_STDMETHODCALLTYPE* getParameterData) (void* thisInterface, Steinberg_int32 index);
    struct Steinberg_Vst_IParamValueQueue* (SMTG_STDMETHODCALLTYPE* addParameterData) (void* thisInterface, const Steinberg_Vst_ParamID* id, Steinberg_int32* index);

} Steinberg_Vst_IParameterChangesVtbl;

typedef struct Steinberg_Vst_IParameterChanges
{
    struct Steinberg_Vst_IParameterChangesVtbl* lpVtbl;
} Steinberg_Vst_IParameterChanges;

static const Steinberg_TUID Steinberg_Vst_IParameterChanges_iid = SMTG_INLINE_UID (0xA4779663, 0x0BB64A56, 0xB44384A8, 0x466FEB9D);

